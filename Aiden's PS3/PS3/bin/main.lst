
Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
    1    1                      ;**************************************************************************************
    2    2                      ;* PS3 main [includes LibV2.2]                                                        *
    3    3                      ;**************************************************************************************
    4    4                      ;* Summary:                                                                           *
    5    5                      ;*   Code for ME 305 PS3                                                              *
    6    6                      ;*                                                                                    *
    7    7                      ;* Author: Aiden Taylor                                                               *
    8    8                      ;*   Cal Poly University                                                              *
    9    9                      ;*   Fall 2023                                                                        *
   10   10                      ;*                                                                                    *
   11   11                      ;* Revision History:                                                                  *
   12   12                      ;*   -                                                                                *
   13   13                      ;*                                                                                    *
   14   14                      ;* ToDo:                                                                              *
   15   15                      ;*   -                                                                                *
   16   16                      ;**************************************************************************************
   17   17                      
   18   18                      ;/------------------------------------------------------------------------------------\
   19   19                      ;| Include all associated files                                                       |
   20   20                      ;\------------------------------------------------------------------------------------/
   21   21                      ; The following are external files to be included during assembly
   22   22                      
   23   23                      
   24   24                      ;/------------------------------------------------------------------------------------\
   25   25                      ;| External Definitions                                                               |
   26   26                      ;\------------------------------------------------------------------------------------/
   27   27                      ; All labels that are referenced by the linker need an external definition
   28   28                      
   29   29                                    XDEF  main
   30   30                      
   31   31                      ;/------------------------------------------------------------------------------------\
   32   32                      ;| External References                                                                |
   33   33                      ;\------------------------------------------------------------------------------------/
   34   34                      ; All labels from other files must have an external reference
   35   35                      
   36   36                                    XREF ENABLE_MOTOR, DISABLE_MOTOR
   37   37                                    XREF STARTUP_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR
   38   38                                    XREF STARTUP_PWM, STARTUP_ATD0, STARTUP_ATD1
   39   39                                    XREF OUTDACA, OUTDACB
   40   40                                    XREF STARTUP_ENCODER, READ_ENCODER
   41   41                                    XREF INITLCD, SETADDR, GETADDR, CURSOR_ON, CURSOR_OFF, DISP_OFF
   42   42                                    XREF OUTCHAR, OUTCHAR_AT, OUTSTRING, OUTSTRING_AT
   43   43                                    XREF INITKEY, LKEY_FLG, GETCHAR
   44   44                                    XREF LCDTEMPLATE, UPDATELCD_L1, UPDATELCD_L2
   45   45                                    XREF LVREF_BUF, LVACT_BUF, LERR_BUF,LEFF_BUF, LKP_BUF, LKI_BUF
   46   46                                    XREF Entry, ISR_KEYPAD
   47   47                                  
   48   48                      ;/------------------------------------------------------------------------------------\
   49   49                      ;| Assembler Equates                                                                  |
   50   50                      ;\------------------------------------------------------------------------------------/
   51   51                      ; Constant values can be equated here
   52   52                      
   53   53                      
   54   54                      
   55   55                      
   56   56                      
   57   57                      
   58   58                      ;/------------------------------------------------------------------------------------\
   59   59                      ;| Variables in RAM                                                                   |
   60   60                      ;\------------------------------------------------------------------------------------/
   61   61                      ; The following variables are located in unpaged ram
   62   62                      
   63   63                      DEFAULT_RAM:  SECTION
   64   64                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
   65   65   000000             count DS.B 1
   66   66   000001             buffer DS.B 5
   67   67   000006             input DS.B 1
   68   68   000007             result DS.B 2
   69   69   000009             tmp DS.B 1
   70   70   00000A             err DS.B 1
   71   71                      
   72   72                      
   73   73                      
   74   74                      
   75   75                      ;/------------------------------------------------------------------------------------\
   76   76                      ;|  Main Program Code                                                                 |
   77   77                      ;\------------------------------------------------------------------------------------/
   78   78                      ; Your code goes here
   79   79                      
   80   80                      MyCode: SECTION
   81   81                      main:
   82   82                      		
   83   83   000000 CExx xx     		ldx #buffer
   84   84   000003 1808 0001   		movb #$01, 0,x
   85   85   000007 1808 0102   		movb #$02, 1,x
   86   86   00000B 1808 0203   		movb #$03, 2,x
   87   87   00000F 1808 0304   		movb #$04, 3,x
   88   88   000013 1808 0405   		movb #$05, 4,x
   89   89   000017 00          		bgnd
   90   90   000018 16xx xx     		jsr conversion
   91   91                      		
   92   92   00001B 20FE        spin: bra spin
   93   93                              
   94   94                      ;/------------------------------------------------------------------------------------\
   95   95                      ;| Subroutines |
   96   96                      ;/------------------------------------------------------------------------------------/
   97   97                      ; Add subroutines here:
   98   98                      
   99   99                      conversion:
  100  100                      		
  101  101                      		;init here
  102  102   00001D 1879 xxxx   		clrw result
  103  103   000021 79xx xx     		clr tmp
  104  104   000024 79xx xx     		clr err
  105  105   000027 CExx xx     		ldx #buffer
  106  106   00002A 35          		pshy			;pushes registers to stack so that they remain unchanged by the subroutine
  107  107   00002B 37          		pshb
  108  108   00002C 39          		pshc
  109  109                      		
  110  110                      		
  111  111                      convloop:
  112  112                      
  113  113                      		;loop goes here
  114  114   00002D B6xx xx     		ldaa count		;check if count has finished for loop
  115  115   000030 2722        		beq loopfin		;branch to exit if count is done
  116  116                      		
  117  117                      		
  118  118   000032 FDxx xx     		ldy result		;load current value of result into register y for use
  119  119   000035 CC00 0A     		ldd #$000A		;load hex 10 into accumulator for use
  120  120   000038 13          		emul			;multiply register y and acc d
  121  121   000039 291E        		bvs err1
  122  122   00003B 7Cxx xx     		std result		;keep the bottom 2 bytes of the emul since we are never dealing with 4 bit nums
  123  123                      		
  124  124   00003E B6xx xx     		ldaa tmp		;tmp is used for index addressing
  125  125   000041 E6E4        		ldab a,x		;reference the correct digit in the buffer using tmp
  126  126   000043 C030        		subb #$30		;subtract $30 to get the decimal value of the ascii code
  127  127                      		
  128  128                      		

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  129  129   000045 87          		clra
  130  130   000046 F3xx xx     		addd result		;add result and acc d 
  131  131   000049 7Cxx xx     		std result		;store addition in result
  132  132   00004C 72xx xx     		inc tmp			;inc tmp so that buffer digits are correctly referenced
  133  133   00004F 73xx xx     		dec count		;dec count to track how long the loop has operated for
  134  134   000052 20D9        		bra convloop
  135  135                      		
  136  136                      loopfin:
  137  137                      		
  138  138   000054 FExx xx     		ldx result
  139  139   000057 2707        		beq err2
  140  140                      		
  141  141                      
  142  142                      err1:		
  143  143                      
  144  144   000059 180B 01xx   		movb #$01, err
             00005D xx         
  145  145   00005E 2005        		bra cnvexit
  146  146                      		
  147  147                      err2:
  148  148   000060 180B 02xx   		movb #$02, err
             000064 xx         
  149  149                      
  150  150                      cnvexit:
  151  151                      
  152  152   000065 B6xx xx     		ldaa err		;load error into accumulator a
  153  153   000068 38          		pulc
  154  154   000069 33          		pulb
  155  155   00006A 31          		puly
  156  156   00006B 3D          		rts
  157  157                      
  158  158                      DELAY_1ms:
  159  159   00006C CD05 84             ldy #$0584
  160  160                              INNER: ; inside loop
  161  161   00006F 8D00 00             cpy #0
  162  162   000072 2703                beq EXIT
  163  163   000074 03                  dey
  164  164   000075 20F8                bra INNER
  165  165                              EXIT:
  166  166   000077 3D                  rts ; exit DELAY_1ms
  167  167                              
  168  168                      ;/------------------------------------------------------------------------------------\
  169  169                      ;| Messages |
  170  170                      ;/------------------------------------------------------------------------------------/
  171  171                      ; Add ASCII messages here:
  172  172                      ;/------------------------------------------------------------------------------------\
  173  173                      ;| Vectors |
  174  174                      ;\------------------------------------------------------------------------------------/
  175  175                      ; Add interrupt and reset vectors here:
  176  176                              ORG $FFFE ; reset vector address
  177  177  a00FFFE xxxx                DC.W Entry
