
Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
    1    1                      ;**************************************************************************************
    2    2                      ;* PS3 main [includes LibV2.2]                                                        *
    3    3                      ;**************************************************************************************
    4    4                      ;* Summary:                                                                           *
    5    5                      ;*   Code for ME 305 PS3                                                              *
    6    6                      ;*                                                                                    *
    7    7                      ;* Author: Aiden Taylor                                                               *
    8    8                      ;*   Cal Poly University                                                              *
    9    9                      ;*   Fall 2023                                                                        *
   10   10                      ;*                                                                                    *
   11   11                      ;* Revision History:                                                                  *
   12   12                      ;*   -                                                                                *
   13   13                      ;*                                                                                    *
   14   14                      ;* ToDo:                                                                              *
   15   15                      ;*   -                                                                                *
   16   16                      ;**************************************************************************************
   17   17                      
   18   18                      ;/------------------------------------------------------------------------------------\
   19   19                      ;| Include all associated files                                                       |
   20   20                      ;\------------------------------------------------------------------------------------/
   21   21                      ; The following are external files to be included during assembly
   22   22                      
   23   23                      
   24   24                      ;/------------------------------------------------------------------------------------\
   25   25                      ;| External Definitions                                                               |
   26   26                      ;\------------------------------------------------------------------------------------/
   27   27                      ; All labels that are referenced by the linker need an external definition
   28   28                      
   29   29                                    XDEF  main
   30   30                      
   31   31                      ;/------------------------------------------------------------------------------------\
   32   32                      ;| External References                                                                |
   33   33                      ;\------------------------------------------------------------------------------------/
   34   34                      ; All labels from other files must have an external reference
   35   35                      
   36   36                                    XREF ENABLE_MOTOR, DISABLE_MOTOR
   37   37                                    XREF STARTUP_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR
   38   38                                    XREF STARTUP_PWM, STARTUP_ATD0, STARTUP_ATD1
   39   39                                    XREF OUTDACA, OUTDACB
   40   40                                    XREF STARTUP_ENCODER, READ_ENCODER
   41   41                                    XREF INITLCD, SETADDR, GETADDR, CURSOR_ON, CURSOR_OFF, DISP_OFF
   42   42                                    XREF OUTCHAR, OUTCHAR_AT, OUTSTRING, OUTSTRING_AT
   43   43                                    XREF INITKEY, LKEY_FLG, GETCHAR
   44   44                                    XREF LCDTEMPLATE, UPDATELCD_L1, UPDATELCD_L2
   45   45                                    XREF LVREF_BUF, LVACT_BUF, LERR_BUF,LEFF_BUF, LKP_BUF, LKI_BUF
   46   46                                    XREF Entry, ISR_KEYPAD
   47   47                                  
   48   48                      ;/------------------------------------------------------------------------------------\
   49   49                      ;| Assembler Equates                                                                  |
   50   50                      ;\------------------------------------------------------------------------------------/
   51   51                      ; Constant values can be equated here
   52   52                      
   53   53                      
   54   54                      
   55   55                      
   56   56                      
   57   57                      
   58   58                      ;/------------------------------------------------------------------------------------\
   59   59                      ;| Variables in RAM                                                                   |
   60   60                      ;\------------------------------------------------------------------------------------/
   61   61                      ; The following variables are located in unpaged ram
   62   62                      
   63   63                      DEFAULT_RAM:  SECTION
   64   64                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
   65   65   000000             count DS.B 1
   66   66   000001             buffer DS.B 5
   67   67   000006             input DS.B 1
   68   68   000007             result DS.B 2
   69   69   000009             tmp DS.B 1
   70   70   00000A             err DS.B 1
   71   71                      
   72   72                      
   73   73                      
   74   74                      
   75   75                      ;/------------------------------------------------------------------------------------\
   76   76                      ;|  Main Program Code                                                                 |
   77   77                      ;\------------------------------------------------------------------------------------/
   78   78                      ; Your code goes here
   79   79                      
   80   80                      MyCode: SECTION
   81   81                      main:
   82   82                      		
   83   83   000000 CExx xx     		ldx #buffer
   84   84   000003 1808 0036   		movb #$36, 0,x
   85   85   000007 1808 0135   		movb #$35, 1,x
   86   86   00000B 1808 0235   		movb #$35, 2,x
   87   87   00000F 1808 0333   		movb #$33, 3,x
   88   88   000013 1808 0436   		movb #$36, 4,x
   89   89                      		
   90   90                      	
   91   91                      		
   92   92                      spin: 
   93   93                          
   94   94   000017 00              bgnd
   95   95   000018 16xx xx     		jsr conversion
   96   96   00001B 20FA            bra spin
   97   97                          
   98   98                              
   99   99                      ;/------------------------------------------------------------------------------------\
  100  100                      ;| Subroutines |
  101  101                      ;/------------------------------------------------------------------------------------/
  102  102                      ; Add subroutines here:
  103  103                      
  104  104                      conversion:
  105  105                      		
  106  106                      		;init here
  107  107   00001D 180B 05xx   		movb #$05, count
             000021 xx         
  108  108   000022 1879 xxxx   		clrw result
  109  109   000026 79xx xx     		clr tmp
  110  110   000029 79xx xx     		clr err
  111  111   00002C CExx xx     		ldx #buffer
  112  112   00002F 35          		pshy			;pushes registers to stack so that they remain unchanged by the subroutine
  113  113   000030 37          		pshb
  114  114   000031 39          		pshc
  115  115                      		
  116  116                      		
  117  117                      convloop:
  118  118                      
  119  119                      		;loop goes here
  120  120   000032 B6xx xx     		ldaa count		;check if count has finished for loop
  121  121   000035 272D        		beq loopfin		;branch to exit if count is done
  122  122                      		
  123  123                      		
  124  124   000037 FDxx xx     		ldy result		;load current value of result into register y for use
  125  125   00003A CC00 0A     		ldd #$000A		;load hex 10 into accumulator for use
  126  126   00003D 13          		emul			;multiply register y and acc d
  127  127   00003E 18D7        		tsty

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  128  128   000040 261B        		bne err1
  129  129   000042 7Cxx xx     		std result		;keep the bottom 2 bytes of the emul since we are never dealing with 4 bit nums
  130  130                      		
  131  131                      		
  132  132                      		
  133  133   000045 B6xx xx     		ldaa tmp		;tmp is used for index addressing
  134  134   000048 E6E4        		ldab a,x		;reference the correct digit in the buffer using tmp
  135  135   00004A C030        		subb #$30		;subtract $30 to get the decimal value of the ascii code
  136  136                      		
  137  137                      		
  138  138   00004C 87          		clra
  139  139   00004D F3xx xx     		addd result		;add result and acc d 
  140  140   000050 7Cxx xx     		std result		;store addition in result
  141  141   000053 2908        		bvs err1
  142  142   000055 72xx xx     		inc tmp		  	;inc tmp so that buffer digits are correctly referenced
  143  143   000058 73xx xx     		dec count		  ;dec count to track how long the loop has operated for
  144  144   00005B 20D5        		bra convloop
  145  145                      			
  146  146                      
  147  147                      err1:		
  148  148                      
  149  149   00005D 180B 01xx   		movb #$01, err
             000061 xx         
  150  150   000062 200A        		bra cnvexit
  151  151                      	
  152  152                      loopfin:
  153  153                      		
  154  154   000064 FExx xx     		ldx result
  155  155   000067 2605        		bne cnvexit	
  156  156                      		
  157  157                      err2:
  158  158                      
  159  159   000069 180B 02xx   		movb #$02, err
             00006D xx         
  160  160                      
  161  161                      cnvexit:
  162  162                      
  163  163   00006E B6xx xx     		ldaa err		;load error into accumulator a
  164  164   000071 38          		pulc
  165  165   000072 33          		pulb
  166  166   000073 31          		puly
  167  167   000074 3D          		rts
  168  168                      
  169  169                      
  170  170                      
  171  171                      DELAY_1ms:
  172  172   000075 CD05 84             ldy #$0584
  173  173                              INNER: ; inside loop
  174  174   000078 8D00 00             cpy #0
  175  175   00007B 2703                beq EXIT
  176  176   00007D 03                  dey
  177  177   00007E 20F8                bra INNER
  178  178                      
  179  179                      EXIT:
  180  180   000080 3D                  rts ; exit DELAY_1ms
  181  181                              
  182  182                      ;/------------------------------------------------------------------------------------\
  183  183                      ;| Messages |
  184  184                      ;/------------------------------------------------------------------------------------/
  185  185                      ; Add ASCII messages here:
  186  186                      ;/------------------------------------------------------------------------------------\
  187  187                      ;| Vectors |
  188  188                      ;\------------------------------------------------------------------------------------/
  189  189                      ; Add interrupt and reset vectors here:

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  190  190                              ORG $FFFE ; reset vector address
  191  191  a00FFFE xxxx                DC.W Entry
