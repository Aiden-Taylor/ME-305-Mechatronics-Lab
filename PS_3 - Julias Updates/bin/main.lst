
Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
    1    1                      ;**************************************************************************************
    2    2                      ;* Blank Project Main [includes LibV2.2]                                              *
    3    3                      ;**************************************************************************************
    4    4                      ;* Summary:  PS 3                                                                     *
    5    5                      ;*   -                                                                                *
    6    6                      ;*                                                                                    *
    7    7                      ;* Author: Julia Fay                                                                  *
    8    8                      ;*   Cal Poly University                                                              *
    9    9                      ;*   Spring 2022                                                                      *
   10   10                      ;*                                                                                    *
   11   11                      ;* Revision History:                                                                  *
   12   12                      ;*   -                                                                                *
   13   13                      ;*                                                                                    *
   14   14                      ;* ToDo:                                                                              *
   15   15                      ;*   -                                                                                *
   16   16                      ;**************************************************************************************
   17   17                      
   18   18                      ;/------------------------------------------------------------------------------------\
   19   19                      ;| Include all associated files                                                       |
   20   20                      ;\------------------------------------------------------------------------------------/
   21   21                      ; The following are external files to be included during assembly
   22   22                      
   23   23                      
   24   24                      ;/------------------------------------------------------------------------------------\
   25   25                      ;| External Definitions                                                               |
   26   26                      ;\------------------------------------------------------------------------------------/
   27   27                      ; All labels that are referenced by the linker need an external definition
   28   28                      
   29   29                                    XDEF  main
   30   30                      
   31   31                      ;/------------------------------------------------------------------------------------\
   32   32                      ;| External References                                                                |
   33   33                      ;\------------------------------------------------------------------------------------/
   34   34                      ; All labels from other files must have an external reference
   35   35                      
   36   36                                    XREF  ENABLE_MOTOR, DISABLE_MOTOR
   37   37                                    XREF  STARTUP_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR
   38   38                                    XREF  STARTUP_PWM, STARTUP_ATD0, STARTUP_ATD1
   39   39                                    XREF  OUTDACA, OUTDACB
   40   40                                    XREF  STARTUP_ENCODER, READ_ENCODER
   41   41                                    XREF  INITLCD, SETADDR, GETADDR, CURSOR_ON, CURSOR_OFF, DISP_OFF
   42   42                                    XREF  OUTCHAR, OUTCHAR_AT, OUTSTRING, OUTSTRING_AT
   43   43                                    XREF  INITKEY, LKEY_FLG, GETCHAR
   44   44                                    XREF  LCDTEMPLATE, UPDATELCD_L1, UPDATELCD_L2
   45   45                                    XREF  LVREF_BUF, LVACT_BUF, LERR_BUF,LEFF_BUF, LKP_BUF, LKI_BUF
   46   46                                    XREF  Entry, ISR_KEYPAD
   47   47                                  
   48   48                      ;/------------------------------------------------------------------------------------\
   49   49                      ;| Assembler Equates                                                                  |
   50   50                      ;\------------------------------------------------------------------------------------/
   51   51                      ; Constant values can be equated here
   52   52                      
   53   53                      
   54   54                      
   55   55                      ;/------------------------------------------------------------------------------------\
   56   56                      ;| Variables in RAM                                                                   |
   57   57                      ;\------------------------------------------------------------------------------------/
   58   58                      ; The following variables are located in unpaged ram
   59   59                      
   60   60                      DEFAULT_RAM:  SECTION
   61   61                      
   62   62   000000             COUNT DS.B 1 
   63   63   000001             BUFFER DS.B 5 
   64   64   000006             INPUT DS.B 1 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
   65   65   000007             RESULT DS.B 1 
   66   66   000008             TMP DS.B 1 
   67   67                      
   68   68                      ;/------------------------------------------------------------------------------------\
   69   69                      ;|  Main Program Code                                                                 |
   70   70                      ;\------------------------------------------------------------------------------------/
   71   71                      ; Your code goes here
   72   72                      
   73   73                      MyCode:       SECTION
   74   74                      main:   
   75   75                             
   76   76                             ;initialization 
   77   77                               
   78   78   000000 16xx xx            jsr INITLCD       ;initialize LCD 
   79   79   000003 8600               ldaa #$00         ;set LCD position to 0
   80   80   000005 CExx xx            ldx #MESSAGE      ;load message into x 
   81   81   000008 16xx xx            jsr OUTSTRING     ;display message 
   82   82   00000B 16xx xx            jsr INITKEY       ;initialize keypad 
   83   83   00000E 16xx xx            jsr CURSOR_ON     ;turn on cursor 
   84   84                             
   85   85   000011 16xx xx            jsr input 
   86   86   000014 16xx xx            jsr convert 
   87   87                             
   88   88                             
   89   89   000017 20FE         spin: bra spin  
   90   90                             
   91   91                      ;---------------------------------------------------------------------------------------       
   92   92                      
   93   93                      
   94   94                      input:
   95   95                             
   96   96                      ;create loop to load buffer with inputted variables 
   97   97                            
   98   98   000019 79xx xx            clr COUNT 
   99   99   00001C CDxx xx            ldy #BUFFER
  100  100                             
  101  101                        input_loop: 
  102  102                       
  103  103   00001F B6xx xx            ldaa COUNT              ;load accumulator a with the value of COUNT 
  104  104   000022 8105               cmpa #$05               ;accumulator a - $5    check if COUNT is 5 
  105  105   000024 272E               beq input_exit          ;if count is 5 then we are done and exit the loop 
  106  106                             
  107  107                             
  108  108   000026 16xx xx            jsr GETCHAR             ;load accumulator b with the keypad input 
  109  109   000029 C108               cmpb #$08               ;accumulator b - $08    check if input is a backspace
  110  110   00002B 270E               beq backspace           ;if it was a backspace, branch to the backspace routine 
  111  111                             
  112  112                             
  113  113                             
  114  114   00002D C139               cmpb #$39               ;accumulator b - $39    check if input is a number 
  115  115   00002F 2EEE               bgt input_loop         ;if input is not a number, go to the top of the loop 
  116  116                             
  117  117   000031 6BEC               stab a, y               ;load the contents of accumulator b into buffer 
  118  118   000033 16xx xx            jsr OUTCHAR             ;display the input charater on the LCD 
  119  119                             
  120  120   000036 72xx xx            inc COUNT               ;increment count 
  121  121   000039 20E4               bra input_loop         ;branch back to the top of the loop 
  122  122                             
  123  123                             
  124  124                        backspace: 
  125  125                       
  126  126   00003B 16xx xx            jsr GETADDR                   ;get current position of LCR 
  127  127   00003E 43                 deca                          ;decrement one 
  128  128   00003F 16xx xx            jsr SETADDR                   ;set address to new position 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  129  129   000042 CExx xx            ldx #BACKSPACE                ;
  130  130   000045 16xx xx            jsr OUTSTRING                 ;output a blank character 
  131  131   000048 16xx xx            jsr GETADDR                   ;get current position of LCR 
  132  132   00004B 43                 deca                          ;decrement one 
  133  133   00004C 16xx xx            jsr SETADDR                   ;set address to new position
  134  134   00004F 73xx xx            dec COUNT                     ;reset the value of count 
  135  135                            
  136  136   000052 20CB               bra input_loop               ;branch back to the top of the loop 
  137  137                       
  138  138                             
  139  139                         input_exit:
  140  140                        
  141  141   000054 8600               ldaa #$00
  142  142   000056 CExx xx            ldx #RESPONSE      ;load message into x 
  143  143   000059 16xx xx            jsr OUTSTRING_AT     ;display message 
  144  144   00005C 3D                 rts    ;return to main 
  145  145                       
  146  146                       
  147  147                      ;-------------------------------------------------------------------------------------
  148  148                      
  149  149                      convert: 
  150  150                      
  151  151   00005D 79xx xx             clr RESULT              ;sets RESULT to zero 
  152  152   000060 79xx xx             clr TMP  
  153  153                                             ;sets TMP to zero 
  154  154                      convert_loop:
  155  155                              
  156  156                      ;check status of loop 
  157  157                              
  158  158   000063 B6xx xx             ldaa COUNT             ;load accumulator a with the value of COUNT 
  159  159   000066 2723                beq convert_exit       ;if count is 0 then we are done and exit the loop
  160  160                              
  161  161                      ;multiply current result value by 10 
  162  162                      
  163  163   000068 FDxx xx             ldy RESULT             ;load index register y with the contents of RESULT
  164  164   00006B CC00 0A             ldd #$000A             ;load accumulator d with the hex value for 10 
  165  165   00006E 13                  emul                   ;multiply the contents of d with the contents of y 
  166  166   00006F 7Dxx xx             sty RESULT             ;store the contents of accumulator d in result
  167  167                             
  168  168                      ;get the next number to be added 
  169  169                      
  170  170   000072 CExx xx             ldx #BUFFER            ;load index register x with the contents of BUFFER
  171  171   000075 B6xx xx             ldaa TMP               ;load index register A with the position value TMP 
  172  172   000078 E6E4                ldab a,X               ;load accumulator b with the contents of buffer at position a 
  173  173   00007A C030                subb #$30              ;subtract #$30 to get the digital value of the numnber 
  174  174                                     
  175  175                      ;add the number to the multiplied result value and store the result 
  176  176                        
  177  177   00007C 87                  clra                   ;clear the contents of accumulator a 
  178  178   00007D FBxx xx             addb RESULT            ;add the contents of accumulator d to result 
  179  179   000080 7Bxx xx             stab RESULT            ;store the contents of accumulator d in result 
  180  180   000083 72xx xx             inc TMP                ;increment so the next position can be reached 
  181  181   000086 73xx xx             dec COUNT              ;decrement count to keep tack of the loop 
  182  182   000089 20D8                bra convert_loop       ;loop back to the top   
  183  183                       
  184  184                       convert_exit: 
  185  185                            
  186  186   00008B 3D                  rts ; return to main  
  187  187                               
  188  188                              
  189  189                      
  190  190                      ;/------------------------------------------------------------------------------------\
  191  191                      ;| Subroutines                                                                        |
  192  192                      ;\------------------------------------------------------------------------------------/

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  193  193                      ; General purpose subroutines go here
  194  194                      
  195  195                      
  196  196                      ;/------------------------------------------------------------------------------------\
  197  197                      ;| ASCII Messages and Constant Data                                                   |
  198  198                      ;\------------------------------------------------------------------------------------/
  199  199                      ; Any constants can be defined here
  200  200                      
  201  201   00008C 706C 6561    MESSAGE: DC.B  'please enter a number: ', $00
             000090 7365 2065  
             000094 6E74 6572  
             000098 2061 206E  
             00009C 756D 6265  
             0000A0 723A 2000  
  202  202   0000A4 7468 6174    RESPONSE: DC.B 'that was a great choice' , $00
             0000A8 2077 6173  
             0000AC 2061 2067  
             0000B0 7265 6174  
             0000B4 2063 686F  
             0000B8 6963 6500  
  203  203   0000BC 2000         BACKSPACE: DC.B ' ' , $00 
  204  204                       
  205  205                      ;/------------------------------------------------------------------------------------\
  206  206                      ;| Vectors                                                                            |
  207  207                      ;\------------------------------------------------------------------------------------/
  208  208                      ; Add interrupt and reset vectors here
  209  209                      
  210  210                              ORG   $FFFE                    ; reset vector address
  211  211  a00FFFE xxxx                DC.W  Entry
  212  212                      
