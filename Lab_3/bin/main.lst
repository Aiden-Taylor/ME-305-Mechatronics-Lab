
Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
    1    1                      ;**************************************************************************************
    2    2                      ;* Lab 3 Main [includes LibV2.2]                                                      *
    3    3                      ;**************************************************************************************
    4    4                      ;* Summary:                                                                           *
    5    5                      ;*   -                                                                                *
    6    6                      ;*                                                                                    *
    7    7                      ;* Author: Aiden Taylor & Julia Fay                                                   *
    8    8                      ;*   Cal Poly University                                                              *
    9    9                      ;*   Fall 2023                                                                        *
   10   10                      ;*                                                                                    *
   11   11                      ;* Revision History:                                                                  *
   12   12                      ;*   -                                                                                *
   13   13                      ;*                                                                                    *
   14   14                      ;* ToDo:                                                                              *
   15   15                      ;* 
   16   16                          ;make cursor turn off
   17   17                          ;display error msgs
   18   18                          ;give fixed msgs proper spacing 
   19   19                          
   20   20                      ;**************************************************************************************
   21   21                      
   22   22                      ;/------------------------------------------------------------------------------------\
   23   23                      ;| Include all associated files                                                       |
   24   24                      ;\------------------------------------------------------------------------------------/
   25   25                      ; The following are external files to be included during assembly
   26   26                      
   27   27                      
   28   28                      ;/------------------------------------------------------------------------------------\
   29   29                      ;| External Definitions                                                               |
   30   30                      ;\------------------------------------------------------------------------------------/
   31   31                      ; All labels that are referenced by the linker need an external definition
   32   32                      
   33   33                                    XDEF  main
   34   34                      
   35   35                      ;/------------------------------------------------------------------------------------\
   36   36                      ;| External References                                                                |
   37   37                      ;\------------------------------------------------------------------------------------/
   38   38                      ; All labels from other files must have an external reference
   39   39                      
   40   40                                    XREF  ENABLE_MOTOR, DISABLE_MOTOR
   41   41                                    XREF  STARTUP_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR
   42   42                                    XREF  STARTUP_PWM, STARTUP_ATD0, STARTUP_ATD1
   43   43                                    XREF  OUTDACA, OUTDACB
   44   44                                    XREF  STARTUP_ENCODER, READ_ENCODER
   45   45                                    XREF  INITLCD, SETADDR, GETADDR, CURSOR_ON, CURSOR_OFF, DISP_OFF
   46   46                                    XREF  OUTCHAR, OUTCHAR_AT, OUTSTRING, OUTSTRING_AT
   47   47                                    XREF  INITKEY, LKEY_FLG, GETCHAR
   48   48                                    XREF  LCDTEMPLATE, UPDATELCD_L1, UPDATELCD_L2
   49   49                                    XREF  LVREF_BUF, LVACT_BUF, LERR_BUF,LEFF_BUF, LKP_BUF, LKI_BUF
   50   50                                    XREF  Entry, ISR_KEYPAD
   51   51                                  
   52   52                      ;/------------------------------------------------------------------------------------\
   53   53                      ;| Assembler Equates                                                                  |
   54   54                      ;\------------------------------------------------------------------------------------/
   55   55                      ; Constant values can be equated here
   56   56                      
   57   57          0000 0258   PORTP EQU $0258 ; output port for LEDs
   58   58          0000 025A   DDRP EQU $025A
   59   59          0000 0010   G_LED_1 EQU %00010000 ; green LED output pin for LED pair_1
   60   60          0000 0020   R_LED_1 EQU %00100000 ; red LED output pin for LED pair_1
   61   61          0000 0030   LED_MSK_1 EQU %00110000 ; LED pair_1
   62   62          0000 0040   G_LED_2 EQU %01000000 ; green LED output pin for LED pair_2
   63   63          0000 0080   R_LED_2 EQU %10000000 ; red LED output pin for LED pair_2
   64   64          0000 00C0   LED_MSK_2 EQU %11000000 ; LED pair_2

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
   65   65                      
   66   66                      
   67   67                      ;/------------------------------------------------------------------------------------\
   68   68                      ;| Variables in RAM                                                                   |
   69   69                      ;\------------------------------------------------------------------------------------/
   70   70                      ; The following variables are located in unpaged ram
   71   71                      
   72   72                      DEFAULT_RAM:  SECTION
   73   73                      
   74   74                      ;params for t1 
   75   75                      
   76   76   000000             COUNT DS.B 1
   77   77   000001             F1_FLG  DS.B 1
   78   78   000002             F2_FLG  DS.B 1
   79   79   000003             ON1     DS.B 1 
   80   80   000004             ON2     DS.B 1 
   81   81   000005             MM_ERR  DS.B 1 
   82   82                      
   83   83                      ;params for t2 
   84   84   000006             KEY_FLG DS.B 1
   85   85   000007             KEY_BUFF DS.B 1
   86   86                      
   87   87                      ;params for t3
   88   88   000008             MSG_NUM DS.B 1
   89   89                      
   90   90                      
   91   91                      ;params for t4
   92   92                      
   93   93   000009             DONE_1 DS.B 1
   94   94                      
   95   95                      ;params for t5
   96   96                      
   97   97   00000A             TICKS_1 DS.W 1
   98   98   00000C             COUNT_1 DS.W 1
   99   99                      
  100  100                      ;params for t6
  101  101                      
  102  102   00000E             DONE_2 DS.B 1
  103  103                      
  104  104                      ;params for t7
  105  105                      
  106  106   00000F             TICKS_2 DS.W 1
  107  107   000011             COUNT_2 DS.W 1
  108  108                      
  109  109                      ;params for t8
  110  110                      
  111  111                          ;delay
  112  112                      
  113  113                      
  114  114                      ;state vars
  115  115   000013             t1state DS.B 1
  116  116   000014             t2state DS.B 1
  117  117   000015             t3state DS.B 1
  118  118   000016             t4state DS.B 1
  119  119   000017             t5state DS.B 1
  120  120   000018             t6state DS.B 1
  121  121   000019             t7state DS.B 1
  122  122   00001A             t8state DS.B 1
  123  123                      
  124  124                      ;subroutines ---------
  125  125                      
  126  126                      ;convert
  127  127   00001B             RESULT DS.W 1 
  128  128   00001D             BUFFER DS.B 5

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  129  129   000022             TMP DS.B 1
  130  130   000023             ERR DS.B 1 
  131  131                      
  132  132                      ;input
  133  133   000024             INPUT DS.B 1
  134  134   000025             DPTR DS.W 1
  135  135   000027             FIRSTCH DS.B 1
  136  136                      
  137  137                      ;/------------------------------------------------------------------------------------\
  138  138                      ;|  Main Program Code                                                                 |
  139  139                      ;\------------------------------------------------------------------------------------/
  140  140                      ; Your code goes here
  141  141                      
  142  142                      MyCode:       SECTION
  143  143                      main:  
  144  144   000000 79xx xx            clr t1state ; initialize all tasks to state0
  145  145   000003 79xx xx            clr t2state
  146  146   000006 79xx xx            clr t3state
  147  147   000009 79xx xx            clr t4state
  148  148   00000C 79xx xx            clr t5state
  149  149   00000F 79xx xx            clr t6state
  150  150   000012 79xx xx            clr t7state
  151  151   000015 79xx xx            clr t8state
  152  152                             
  153  153                      Top:
  154  154                              ;bgnd
  155  155   000018 16xx xx             jsr TASK_1 ; execute tasks endlessly
  156  156   00001B 16xx xx             jsr TASK_2
  157  157   00001E 16xx xx             jsr TASK_3
  158  158   000021 16xx xx             jsr TASK_4
  159  159   000024 16xx xx             jsr TASK_5
  160  160   000027 16xx xx             jsr TASK_6
  161  161   00002A 16xx xx             jsr TASK_7
  162  162   00002D 16xx xx             jsr TASK_8
  163  163   000030 20E6                bra Top       
  164  164                             
  165  165   000032 20FE        spin: bra spin
  166  166                      
  167  167                      ;-------------TASK_1 MASTERMIND ---------------------------------------------------------
  168  168                      
  169  169                      TASK_1: 
  170  170                              ;bgnd
  171  171   000034 B6xx xx             ldaa t1state ; get current t1state and branch accordingly
  172  172   000037 2722                beq t1s0
  173  173   000039 43                  deca
  174  174   00003A 273A                beq t1s1
  175  175   00003C 43                  deca
  176  176   00003D 1827 0093           lbeq t1s2
  177  177   000041 43                  deca
  178  178   000042 1827 00D6           lbeq t1s3
  179  179   000046 43                  deca
  180  180   000047 1827 0155           lbeq t1s4
  181  181   00004B 43                  deca
  182  182   00004C 1827 0161           lbeq t1s5
  183  183   000050 43                  deca
  184  184   000051 1827 017B           lbeq t1s6
  185  185   000055 43                  deca
  186  186   000056 1827 0195           lbeq t1s7
  187  187   00005A 3D                  rts ; undefined state - do nothing but return
  188  188                      ;__________________________________________________________________________________
  189  189                      t1s0: ; init TASK_1
  190  190                      
  191  191                      ;clear all of the flags 
  192  192   00005B 79xx xx             clr TICKS_1

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  193  193   00005E 79xx xx             clr TICKS_2
  194  194   000061 79xx xx             clr F1_FLG 
  195  195   000064 79xx xx             clr F2_FLG 
  196  196   000067 79xx xx             clr KEY_FLG 
  197  197   00006A 79xx xx             clr COUNT
  198  198   00006D 16xx xx             jsr clearbuffer   
  199  199   000070 180B 01xx           movb #$01, t1state ; set next state
             000074 xx         
  200  200   000075 3D                  rts
  201  201                      ;__________________________________________________________________________________
  202  202                      t1s1: ;
  203  203                      
  204  204   000076 F7xx xx             tst KEY_FLG                                 ;first test if there is a key to be checked
  205  205   000079 1827 01C6           lbeq exit1                                  ;if there is no key exit
  206  206                      
  207  207                      
  208  208                      ;check if its F1
  209  209                       
  210  210                              ;bgnd
  211  211   00007D B6xx xx             ldaa KEY_BUFF                               ;load accumulator A with the current char
  212  212   000080 F7xx xx             tst F1_FLG
  213  213   000083 260F                bne skipF1
  214  214   000085 F7xx xx             tst F2_FLG
  215  215   000088 260A                bne skipF1                                  ;skip if F1 has already been pressed
  216  216   00008A 81F1                cmpa #$F1                                   ;compare whats in A to F1 
  217  217   00008C 2606                bne skipF1                                  ;if its not F1, skip settting the state
  218  218   00008E 180B 05xx           movb #$05 , t1state                         ;set the state to the appropriate number  
             000092 xx         
  219  219   000093 3D                  rts
  220  220                      
  221  221                      skipF1:  
  222  222                      
  223  223                      ;check if its F2
  224  224                                                
  225  225   000094 F7xx xx             tst F2_FLG 
  226  226   000097 2612                bne skipF2                                  ;skip if F1 has already been pressed
  227  227   000099 F7xx xx             tst F1_FLG
  228  228   00009C 260D                bne skipF2
  229  229   00009E 81F2                cmpa #$F2                                   ;compare whats in A to F2
  230  230   0000A0 2609                bne skipF2                                  ;if its not F2, skip settting the state
  231  231   0000A2 F7xx xx             tst F2_FLG
  232  232   0000A5 180B 06xx           movb #$06 , t1state                         ;set the state to the appropriate number 
             0000A9 xx         
  233  233   0000AA 3D                  rts
  234  234                      
  235  235                      skipF2:
  236  236                      
  237  237                      ;check if its a BS 
  238  238                             
  239  239   0000AB 8108                cmpa #$08                                    ;compare whats in A to BS 
  240  240   0000AD 2606                bne skipBS                                  ;if its not BS, skip settting the state 
  241  241   0000AF 180B 04xx           movb #$04 , t1state                         ;set the state to the appropriate number 
             0000B3 xx         
  242  242   0000B4 3D                  rts
  243  243                      
  244  244                      skipBS: 
  245  245                      
  246  246                      ;check if its a ENT  
  247  247                      
  248  248   0000B5 810A                cmpa #$0A                                    ;compare whats in A to ENT 
  249  249   0000B7 2606                bne skipENT                                 ;if its not BS, skip settting the state 
  250  250   0000B9 180B 03xx           movb #$03 , t1state                         ;set the state to the appropriate number 
             0000BD xx         
  251  251   0000BE 3D                  rts

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  252  252                              
  253  253                      skipENT: 
  254  254                      
  255  255                      ;check if its a digit 
  256  256                              ;bgnd
  257  257   0000BF 36                  psha
  258  258   0000C0 33                  pulb
  259  259   0000C1 8600                ldaa #$00
  260  260                              
  261  261   0000C3 8C00 39             cpd #$39                                   ;check if what in A is a number 
  262  262   0000C6 2E08                bgt skipDIGIT                               ;if its not a number, disregard the input
  263  263   0000C8 37                  pshb
  264  264   0000C9 32                  pula
  265  265                               
  266  266   0000CA 180B 02xx           movb #$02 , t1state                         ;set the state to digit handler 
             0000CE xx         
  267  267   0000CF 3D                  rts
  268  268                      
  269  269                      skipDIGIT: 
  270  270                      
  271  271   0000D0 79xx xx             clr KEY_FLG
  272  272   0000D3 3D                  rts
  273  273                      
  274  274                      ;___________________________________________________________________________________
  275  275                      
  276  276                      t1s2: ;Digit Handler 
  277  277                      
  278  278                      ;checks if we should proceed with the digit handler state 
  279  279   0000D4 F6xx xx             ldab COUNT
  280  280   0000D7 C105                cmpb #$05
  281  281   0000D9 2716                beq toomany
  282  282   0000DB F7xx xx             tst F1_FLG                                  ;test F1 flag 
  283  283   0000DE 261A                bne skip_e                                  ;if not equal to 0, skip exiting 
  284  284   0000E0 F7xx xx             tst F2_FLG                                  ;test the F2 flag 
  285  285   0000E3 2615                bne skip_e                                  ;if not equal to 0, skip exiting 
  286  286   0000E5 79xx xx             clr KEY_FLG
  287  287   0000E8 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             0000EC xx         
  288  288   0000ED 1820 0152           lbra exit1                                   ;exit if equal to 0 
  289  289                      
  290  290                      toomany:
  291  291   0000F1 180B 01xx           movb #$01, t1state
             0000F5 xx         
  292  292   0000F6 79xx xx             clr KEY_FLG
  293  293   0000F9 3D                  rts
  294  294                      
  295  295                      skip_e:
  296  296                      
  297  297                      ;now proceed with the digit handler
  298  298                         
  299  299   0000FA CDxx xx             ldy #BUFFER                                 ;load index register y with buffer 
  300  300   0000FD B6xx xx             ldaa COUNT                                  ;load A with the current value of COUNT 
  301  301   000100 F6xx xx             ldab KEY_BUFF                               ;load b with KEY_BUFF 
  302  302   000103 6BEC                stab a,y                                    ;store the contents of b at the position of COUNT in BUFFER
  303  303                             
  304  304   000105 72xx xx             inc COUNT                                   ;increment count 
  305  305   000108 180B 00xx           movb #$00, KEY_FLG                          ;set key flag to 0 to acknowledge KEYPAD
             00010C xx         
  306  306   00010D 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             000111 xx         
  307  307   000112 79xx xx             clr KEY_FLG                                 ;clear key flag 
  308  308   000115 16xx xx             jsr OUTCHAR
  309  309   000118 1820 0127           lbra exit1                                   ;exit 
  310  310                      ;________________________________________________________________________________________

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  311  311                      t1s3: ;ENT 
  312  312                       
  313  313                      
  314  314                      ;before jsr to conversion, check if any digits have been entered into buffer      
  315  315                            
  316  316   00011C 16xx xx            jsr CURSOR_OFF
  317  317   00011F F7xx xx            tst COUNT                                   ;test the current value of count 
  318  318   000122 2604               bne skip_NO_DIGITS                          ;if the count is not zero, branch 
  319  319   000124 8603               ldaa #$03                                   ;if the count is zero, put an error code into A 
  320  320   000126 2023               bra skip_F2                                 ;branch to the set error state below 
  321  321                             
  322  322                      
  323  323                      skip_NO_DIGITS: 
  324  324                      
  325  325                      ;send to conversion to get a BCD form of the input 
  326  326                          
  327  327   000128 16xx xx            jsr conversion                              ;convert the contents of buffer to binary 
  328  328   00012B 79xx xx            clr COUNT                                   ;set count back to zero 
  329  329   00012E 79xx xx            clr BUFFER                                  ;clear the contents of the BUFFER
  330  330                             
  331  331                      ;check which ON flag to set 
  332  332                       
  333  333   000131 F7xx xx            tst F1_FLG                                  ;test the F1 flag
  334  334   000134 2708               beq skip_F1_a                               ;if the flag is zero, skip the next steps 
  335  335   000136 180B 01xx          movb #01, ON1                               ;if the flag is 1, set ON1 to be true 
             00013A xx         
  336  336   00013B 7Exx xx            stx TICKS_1                                 ;store the results of the conversion 
  337  337                               
  338  338                      skip_F1_a:  
  339  339                       
  340  340   00013E F7xx xx            tst F2_FLG                                  ;test the F2 flag
  341  341   000141 2708               beq skip_F2                                 ;if the flag is zero, skip the next steps 
  342  342   000143 180B 01xx          movb #$01, ON2                              ;if the flag is 1, set ON2 to be true 
             000147 xx         
  343  343   000148 7Exx xx            stx TICKS_2                                 ;store the results of the conversion
  344  344                      
  345  345                      skip_F2:
  346  346                      
  347  347                      ;automatically set the state back to 1 for all cases  
  348  348                      
  349  349   00014B 180B 01xx          movb #$01, t1state                          ;set the state back to 1 
             00014F xx         
  350  350                             
  351  351                      ;check for error and set variables accordingly so that user has to start over 
  352  352                      
  353  353                             ;bgnd
  354  354   000150 8100               cmpa #$00                                   ;check whats in A 
  355  355   000152 272F               beq skipERROR                               ;check if an error was generated from conversion
  356  356   000154 180B 07xx          movb #$07, t1state                          ;if there is an error code set the state to the 
             000158 xx         
  357  357                                                                         ;error state
  358  358   000159 7Axx xx            staa MM_ERR                                 ;store the error code of accumulator A into a variable 
  359  359                                                                         ;so it is not affected by other code before it gets to 
  360  360                                                                         ;the error state                                              
  361  361                                                                           
  362  362                      ;check which ON variable needs to be cleared if there is an error 
  363  363                            ;bgnd
  364  364   00015C F7xx xx           tst F1_FLG                                   ;test the F1 flag
  365  365   00015F 270A              beq skip_F1_b                                ;if the flag is zero, skip the next steps 
  366  366   000161 79xx xx           clr ON1                                      ;clear ON1
  367  367   000164 79xx xx           clr TICKS_1                                  ;clear TICKS_1
  368  368   000167 1820 00D8         lbra exit1
  369  369                            
  370  370                      skip_F1_b: 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  371  371                       
  372  372   00016B F7xx xx           tst F2_FLG                                   ;test the F2 flag
  373  373   00016E 2713              beq skipERROR                                ;if the flag is zero, skip the next steps
  374  374   000170 79xx xx           clr ON2                                      ;clear ON2 
  375  375   000173 79xx xx           clr TICKS_2                                  ;clear TICKS_2
  376  376   000176 79xx xx           clr KEY_FLG                                  ;clear key flag
  377  377   000179 16xx xx           jsr clearbuffer
  378  378   00017C 16xx xx           jsr CURSOR_OFF   
  379  379   00017F 1820 00C0         lbra exit1                                   ;exit without clearing F1 and F2 flags 
  380  380                                        
  381  381                      skipERROR:
  382  382                      
  383  383                      ;if there are no errors, clear the F1 and F2 flags and exit     
  384  384                            
  385  385   000183 16xx xx           jsr clearbuffer
  386  386   000186 16xx xx           jsr CURSOR_OFF 
  387  387   000189 79xx xx           clr KEY_FLG 
  388  388   00018C 79xx xx           clr F1_FLG 
  389  389   00018F 79xx xx           clr F2_FLG
  390  390   000192 180B 01xx         movb #$01, DONE_1
             000196 xx         
  391  391   000197 180B 01xx         movb #$01, DONE_2  
             00019B xx         
  392  392   00019C 1820 00A3         lbra exit1                                    ;exit
  393  393                       ;________________________________________________________________________________________
  394  394                      t1s4: ;BS
  395  395                       
  396  396   0001A0 180B 02xx          movb #$02 , t3state                         ;set the state in task 3 to the BS state   
             0001A4 xx         
  397  397   0001A5 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001A9 xx         
  398  398   0001AA 79xx xx            clr KEY_FLG 
  399  399   0001AD 1820 0092          lbra exit1                                   ;exit
  400  400                       ;________________________________________________________________________________________
  401  401                      t1s5: ;F1 state 
  402  402                       
  403  403                             
  404  404   0001B1 180B 01xx          movb #$01, F1_FLG                           ;set the F1_FLG to be true
             0001B5 xx         
  405  405   0001B6 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001BA xx         
  406  406   0001BB 79xx xx            clr ON1 
  407  407   0001BE 79xx xx            clr KEY_FLG
  408  408   0001C1 8608               ldaa #$08
  409  409   0001C3 16xx xx            jsr SETADDR
  410  410   0001C6 16xx xx            jsr CURSOR_ON
  411  411   0001C9 180B 03xx          movb #$03, MSG_NUM
             0001CD xx         
  412  412   0001CE 2073               bra exit1                                   ;exit
  413  413                             
  414  414                       ;________________________________________________________________________________________
  415  415                      t1s6: ;F2 state 
  416  416                       
  417  417   0001D0 180B 01xx          movb #$01, F2_FLG                           ;set the F2_FLG to be true
             0001D4 xx         
  418  418   0001D5 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001D9 xx         
  419  419   0001DA 79xx xx            clr ON2
  420  420   0001DD 79xx xx            clr KEY_FLG
  421  421   0001E0 8648               ldaa #$48
  422  422   0001E2 16xx xx            jsr SETADDR
  423  423   0001E5 16xx xx            jsr CURSOR_ON
  424  424   0001E8 180B 04xx          movb #$04, MSG_NUM 
             0001EC xx         

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  425  425   0001ED 2054               bra exit1                                   ;exit
  426  426                      
  427  427                      ;________________________________________________________________________________________
  428  428                      t1s7: ;Error state 
  429  429                      
  430  430                      
  431  431                      ;checks the error code in accumulator A and which F flag is set to set the appropiate fixed 
  432  432                      ;message state to be displayed through task 3 
  433  433                      
  434  434                      ;split the code into two sections. the F1 and F2 sections 
  435  435                        
  436  436                      ;fist test the F1 flag 
  437  437                             ;bgnd
  438  438   0001EF B6xx xx            ldaa MM_ERR
  439  439   0001F2 F7xx xx            tst F1_FLG                                   ;test the F1 flag
  440  440   0001F5 271B               beq skip_F1_e                                ;if the flag is zero, skip the next steps    
  441  441                       
  442  442                      ;now check the error number and set the message number for task 3 
  443  443                       
  444  444                                                               ;put the error number back into accumulator a 
  445  445   0001F7 8101               cmpa #01                                     ;check if the error code is mag to large 
  446  446   0001F9 2605               bne skip_F1_toolarge                         ;skip setting the message num
  447  447   0001FB 180B 09xx          movb #$09, MSG_NUM                           ;set the appropiate message num 
             0001FF xx         
  448  448                      
  449  449                      skip_F1_toolarge: 
  450  450                      
  451  451   000200 8102               cmpa #02                                     ;check if the error code is zero magnitude 
  452  452   000202 2605               bne skip_F1_zeromag                          ;skip setting the message num
  453  453   000204 180B 07xx          movb #$07, MSG_NUM                           ;set the appropiate message num 
             000208 xx         
  454  454                      
  455  455                      skip_F1_zeromag: 
  456  456                      
  457  457   000209 8103               cmpa #03                                     ;check if the error code is zero digits
  458  458   00020B 2605               bne skip_F1_e                                ;skip setting the message num
  459  459   00020D 180B 05xx          movb #$05, MSG_NUM                           ;set the appropiate message num    
             000211 xx         
  460  460                         
  461  461                      skip_F1_e: 
  462  462                       
  463  463                      ;now test the F2 flag 
  464  464                       
  465  465   000212 F7xx xx            tst F2_FLG                                   ;test the F1 flag
  466  466   000215 271B               beq skip_F2_e                                ;if the flag is zero, skip the next steps    
  467  467                       
  468  468                      ;now check the error number and set the message number for task 3 
  469  469                       
  470  470   000217 8101               cmpa #01                                     ;check if the error code is mag to large 
  471  471   000219 2605               bne skip_F2_toolarge                         ;skip setting the message num
  472  472   00021B 180B 0Axx          movb #$0A, MSG_NUM                           ;set the appropiate message num 
             00021F xx         
  473  473                      
  474  474                      skip_F2_toolarge: 
  475  475                      
  476  476   000220 8102               cmpa #02                                     ;check if the error code is zero magnitude 
  477  477   000222 2605               bne skip_F2_zeromag                          ;skip setting the message num
  478  478   000224 180B 08xx          movb #$08, MSG_NUM                           ;set the appropiate message num 
             000228 xx         
  479  479                      
  480  480                      skip_F2_zeromag: 
  481  481                      
  482  482   000229 8103               cmpa #03                                     ;check if the error code is zero digits
  483  483   00022B 2605               bne skip_F2_e                                ;skip setting the message num

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  484  484   00022D 180B 06xx          movb #$06, MSG_NUM                           ;set the appropiate message num 
             000231 xx         
  485  485                       
  486  486                      skip_F2_e: 
  487  487                      
  488  488                       ;clear the F1 and F2 flags and fall through to the exit 
  489  489                      
  490  490   000232 79xx xx             clr F1_FLG 
  491  491   000235 79xx xx             clr F2_FLG
  492  492   000238 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             00023C xx         
  493  493   00023D 16xx xx             jsr clearbuffer
  494  494   000240 79xx xx             clr KEY_FLG
  495  495                      
  496  496                      exit1:
  497  497                              ;clr KEY_FLG
  498  498   000243 3D                  rts
  499  499                      ;----------------------TASK 2 - KEYPAD -------------------------------------------; 
  500  500                       
  501  501                      TASK_2:
  502  502                       
  503  503                              ;bgnd
  504  504   000244 B6xx xx             ldaa t2state ;get state
  505  505   000247 2707                beq t2s0
  506  506   000249 43                  deca
  507  507   00024A 270D                beq t2s1
  508  508   00024C 43                  deca
  509  509   00024D 2721                beq t2s2
  510  510   00024F 3D                  rts
  511  511                      
  512  512                      t2s0:
  513  513                      
  514  514                              ;init
  515  515                              
  516  516   000250 16xx xx             jsr INITKEY       ;initialize keypad
  517  517   000253 180B 01xx           movb #$01, t2state
             000257 xx         
  518  518   000258 3D                  rts
  519  519                              
  520  520                      t2s1:     
  521  521                         
  522  522   000259 F7xx xx             tst LKEY_FLG
  523  523   00025C 271C                beq exit2
  524  524   00025E 16xx xx             jsr GETCHAR
  525  525   000261 7Bxx xx             stab KEY_BUFF     ;stores the input char into key buffer
  526  526   000264 180B 01xx           movb #$01, KEY_FLG        ;notifies MM of key input
             000268 xx         
  527  527   000269 180B 02xx           movb #$02, t2state
             00026D xx         
  528  528   00026E 200A                bra exit2                                   ;exit
  529  529                              
  530  530                      t2s2:
  531  531                      
  532  532   000270 F7xx xx             tst KEY_FLG
  533  533   000273 2605                bne exit2
  534  534   000275 180B 01xx           movb #$01, t2state
             000279 xx         
  535  535                              
  536  536                      
  537  537   00027A 3D          exit2: rts        
  538  538                              
  539  539                              
  540  540                      ;---------------------TASK 3 - DISPLAY ---------------------------------------------;
  541  541                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  542  542                      TASK_3:
  543  543                      
  544  544   00027B B6xx xx             ldaa t3state
  545  545   00027E 272A                beq t3s0
  546  546   000280 43                  deca
  547  547   000281 273A                beq t3s1
  548  548   000283 43                  deca
  549  549   000284 2748                beq t3s2
  550  550   000286 43                  deca
  551  551   000287 274E                beq t3s3
  552  552   000289 43                  deca
  553  553   00028A 2759                beq t3s4
  554  554   00028C 43                  deca
  555  555   00028D 2764                beq t3s5
  556  556   00028F 43                  deca
  557  557   000290 276F                beq t3s6
  558  558   000292 43                  deca
  559  559   000293 277A                beq t3s7
  560  560   000295 43                  deca
  561  561   000296 1827 0083           lbeq t3s8
  562  562   00029A 43                  deca
  563  563   00029B 1827 008C           lbeq t3s9
  564  564   00029F 43                  deca
  565  565   0002A0 1827 0095           lbeq t3s10
  566  566   0002A4 43                  deca
  567  567   0002A5 1827 009E           lbeq t3s11
  568  568   0002A9 3D                  rts
  569  569                              
  570  570                      t3s0:     ;init    
  571  571                              
  572  572   0002AA 16xx xx            jsr INITLCD       ;initialize LCD
  573  573   0002AD 180B 01xx          movb #$01, FIRSTCH
             0002B1 xx         
  574  574   0002B2 8600               ldaa #$00         ;set LCD position to 0
  575  575   0002B4 16xx xx            jsr SETADDR
  576  576                             ;jsr CURSOR_ON     ;turn on cursor
  577  577   0002B7 180B 0Bxx          movb #$0B, t3state ; go to init state 
             0002BB xx         
  578  578   0002BC 3D                 rts
  579  579                              
  580  580                      t3s1:
  581  581                      
  582  582                             ;hub
  583  583   0002BD 180B 01xx          movb #$01, FIRSTCH
             0002C1 xx         
  584  584   0002C2 F6xx xx            ldab MSG_NUM            
  585  585   0002C5 7Bxx xx            stab t3state
  586  586   0002C8 180B 01xx          movb #$01, MSG_NUM            
             0002CC xx         
  587  587   0002CD 3D                 rts
  588  588                      
  589  589                      
  590  590                      t3s2:   ;backspace
  591  591                              ;bgnd
  592  592   0002CE 16xx xx             jsr backspace
  593  593   0002D1 180B 01xx           movb #$01, t3state
             0002D5 xx         
  594  594   0002D6 3D                  rts
  595  595                      
  596  596                              
  597  597                      t3s3:   ;full time1 message     
  598  598                              ;bgnd
  599  599   0002D7 8600                ldaa #$00
  600  600   0002D9 CExx xx             ldx #TIME1

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  601  601   0002DC F7xx xx             tst FIRSTCH
  602  602   0002DF 2676                bne char1
  603  603   0002E1 16xx xx             jsr PUTCHAR
  604  604   0002E4 3D                  rts
  605  605                              
  606  606                              
  607  607                      t3s4:   ;full time2 message
  608  608   0002E5 8640                ldaa #$40
  609  609   0002E7 CExx xx             ldx #TIME2
  610  610   0002EA F7xx xx             tst FIRSTCH
  611  611   0002ED 2668                bne char1
  612  612   0002EF 16xx xx             jsr PUTCHAR
  613  613   0002F2 3D                  rts
  614  614                      
  615  615                      
  616  616                      t3s5:   ;no digit 1 message
  617  617   0002F3 8600                ldaa #$00
  618  618   0002F5 CExx xx             ldx #NODIG1
  619  619   0002F8 F7xx xx             tst FIRSTCH
  620  620   0002FB 265A                bne char1
  621  621   0002FD 16xx xx             jsr PUTCHAR
  622  622   000300 3D                  rts
  623  623                      
  624  624                      
  625  625                      t3s6:   ;no digit 2 message
  626  626   000301 8640                ldaa #$40
  627  627   000303 CExx xx             ldx #NODIG2
  628  628   000306 F7xx xx             tst FIRSTCH
  629  629   000309 264C                bne char1
  630  630   00030B 16xx xx             jsr PUTCHAR
  631  631   00030E 3D                  rts
  632  632                              
  633  633                      
  634  634                      t3s7:   ;zero magnitude 1 message
  635  635   00030F 8600                ldaa #$00
  636  636   000311 CExx xx             ldx #ZMAG1
  637  637   000314 F7xx xx             tst FIRSTCH
  638  638   000317 263E                bne char1
  639  639   000319 16xx xx             jsr PUTCHAR
  640  640   00031C 3D                  rts
  641  641                      
  642  642                      t3s8:   ;zero magnitude 2 message
  643  643   00031D 8640                ldaa #$40
  644  644   00031F CExx xx             ldx #ZMAG2
  645  645   000322 F7xx xx             tst FIRSTCH
  646  646   000325 2630                bne char1
  647  647   000327 16xx xx             jsr PUTCHAR
  648  648   00032A 3D                  rts
  649  649                      
  650  650                      t3s9:   ;magnitude too large 1 message
  651  651   00032B 8600                ldaa #$00
  652  652   00032D CExx xx             ldx #MAGTL1
  653  653   000330 F7xx xx             tst FIRSTCH
  654  654   000333 2622                bne char1
  655  655   000335 16xx xx             jsr PUTCHAR
  656  656   000338 3D                  rts
  657  657                      
  658  658                      
  659  659                      t3s10:  ;magnitude too large 2 message
  660  660   000339 8640                ldaa #$40
  661  661   00033B CExx xx             ldx #MAGTL2
  662  662   00033E F7xx xx             tst FIRSTCH
  663  663   000341 2614                bne char1
  664  664   000343 16xx xx             jsr PUTCHAR

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  665  665   000346 3D                  rts
  666  666                      
  667  667                      t3s11:  ;display full screen (init message)
  668  668                      
  669  669   000347 CExx xx            ldx #INITMSG
  670  670   00034A F7xx xx            tst FIRSTCH
  671  671   00034D 2604               bne initmsg
  672  672   00034F 16xx xx            jsr ICHAR
  673  673   000352 3D                 rts
  674  674                             
  675  675                      initmsg: ;first char of init message
  676  676                             
  677  677   000353 16xx xx            jsr ICHAR1
  678  678   000356 3D                 rts
  679  679                             
  680  680                      char1:    ;first char of any message
  681  681                      
  682  682   000357 16xx xx            jsr PUTCHAR1
  683  683   00035A 3D                 rts 
  684  684                              
  685  685                      exit3:
  686  686                      
  687  687   00035B 3D                 rts
  688  688                             
  689  689                      ;------------------TASK 4--------------------------------------------------
  690  690                      ;pattern 1
  691  691                      
  692  692                      TASK_4: 
  693  693                              ;bgnd
  694  694   00035C F7xx xx             tst ON1
  695  695   00035F 271B                beq turnofft4
  696  696                              
  697  697   000361 B6xx xx             ldaa t4state ; get current t4state and branch accordingly
  698  698   000364 2720                beq t4state0
  699  699   000366 43                  deca
  700  700   000367 272E                beq t4state1
  701  701   000369 43                  deca
  702  702   00036A 273A                beq t4state2
  703  703   00036C 43                  deca
  704  704   00036D 2746                beq t4state3
  705  705   00036F 43                  deca
  706  706   000370 2752                beq t4state4
  707  707   000372 43                  deca
  708  708   000373 275E                beq t4state5
  709  709   000375 43                  deca
  710  710   000376 276A                beq t4state6
  711  711   000378 43                  deca
  712  712   000379 2776                beq t4state7
  713  713   00037B 3D                  rts ; undefined state - do nothing but return
  714  714                              
  715  715                      turnofft4:
  716  716                              ;changes lights to off
  717  717   00037C 1D02 5830           bclr PORTP, LED_MSK_1
  718  718   000380 180B 07xx           movb #$07, t4state
             000384 xx         
  719  719   000385 3D                  rts
  720  720                              
  721  721                              
  722  722                      t4state0: ; init TASK_1 (not G, not R)
  723  723   000386 79xx xx             clr ON1
  724  724   000389 1D02 5830           bclr PORTP, LED_MSK_1 ; ensure that LEDs are off when initialized
  725  725   00038D 1C02 5A30           bset DDRP, LED_MSK_1 ; set LED_MSK_1 pins as PORTS outputs
  726  726   000391 180B 01xx           movb #$01, t4state ; set next state
             000395 xx         

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  727  727   000396 3D                  rts
  728  728                              
  729  729                      t4state1: ; G, not R
  730  730   000397 1C02 5810           bset PORTP, G_LED_1 ; set state1 pattern on LEDs
  731  731   00039B F7xx xx             tst DONE_1 ; check TASK_4 done flag
  732  732   00039E 2705                beq exit_t4s1 ; if not done, return
  733  733   0003A0 180B 02xx           movb #$02, t4state ; otherwise if done, set next state
             0003A4 xx         
  734  734                      exit_t4s1:
  735  735   0003A5 3D                  rts
  736  736                              
  737  737                      t4state2: ; not G, not R
  738  738   0003A6 1D02 5810           bclr PORTP, G_LED_1 ; set state2 pattern on LEDs
  739  739   0003AA F7xx xx             tst DONE_1 ; check TASK_4 done flag
  740  740   0003AD 2705                beq exit_t4s2 ; if not done, return
  741  741   0003AF 180B 03xx           movb #$03, t4state ; otherwise if done, set next state
             0003B3 xx         
  742  742                      exit_t4s2:
  743  743   0003B4 3D                  rts
  744  744                              
  745  745                      t4state3: ; not G, R
  746  746   0003B5 1C02 5820           bset PORTP, R_LED_1 ; set state3 pattern on LEDs
  747  747   0003B9 F7xx xx             tst DONE_1 ; check TASK_4 done flag
  748  748   0003BC 2705                beq exit_t4s3 ; if not done, return
  749  749   0003BE 180B 04xx           movb #$04, t4state ; otherwise if done, set next state
             0003C2 xx         
  750  750                      exit_t4s3:
  751  751   0003C3 3D                  rts
  752  752                              
  753  753                      t4state4 ; not G, not R
  754  754   0003C4 1D02 5820           bclr PORTP, R_LED_1 ; set state4 pattern on LEDs
  755  755   0003C8 F7xx xx             tst DONE_1 ; check TASK_4 done flag
  756  756   0003CB 2705                beq exit_t4s4 ; if not done, return
  757  757   0003CD 180B 05xx           movb #$05, t4state ; otherwise if done, set next state
             0003D1 xx         
  758  758                      exit_t4s4:
  759  759   0003D2 3D                  rts
  760  760                              
  761  761                      t4state5: ; G, R
  762  762   0003D3 1C02 5830           bset PORTP, LED_MSK_1 ; set state5 pattern on LEDs
  763  763   0003D7 F7xx xx             tst DONE_1 ; check TASK_4 done flag
  764  764   0003DA 2705                beq exit_t4s5 ; if not done, return
  765  765   0003DC 180B 06xx           movb #$06, t4state ; otherwise if done, set next state
             0003E0 xx         
  766  766                      exit_t4s5:
  767  767   0003E1 3D                  rts
  768  768                              
  769  769                      t4state6: ; not G, not R
  770  770   0003E2 1D02 5830           bclr PORTP, LED_MSK_1 ; set state6 pattern on LEDs
  771  771   0003E6 F7xx xx             tst DONE_1 ; check TASK_4 done flag
  772  772   0003E9 2705                beq exit_t4s6 ; if not done, return
  773  773   0003EB 180B 01xx           movb #$01, t4state ; otherwise if done, set next state
             0003EF xx         
  774  774                      exit_t4s6:
  775  775   0003F0 3D                  rts ; exit TASK_4
  776  776                              
  777  777                      t4state7: 
  778  778                              
  779  779   0003F1 1D02 5830           bclr PORTP, LED_MSK_1
  780  780   0003F5 180B 01xx           movb #$01, t4state
             0003F9 xx         
  781  781   0003FA 3D                  rts         
  782  782                       
  783  783                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  784  784                      
  785  785                      ;------------------TASK 5--------------------------------------------------
  786  786                      ;timing 1
  787  787                      
  788  788   0003FB B6xx xx     TASK_5: ldaa t5state ; get current t5state and branch accordingly
  789  789   0003FE 2704                beq t5state0
  790  790   000400 43                  deca
  791  791   000401 2710                beq t5state1
  792  792   000403 3D                  rts ; undefined state - do nothing but return
  793  793                              
  794  794                      t5state0: ; initialization for TASK_5
  795  795   000404 1804 xxxx           movw TICKS_1, COUNT_1 ; init COUNT_1
             000408 xxxx       
  796  796   00040A 79xx xx             clr DONE_1 ; init DONE_1 to FALSE
  797  797   00040D 180B 01xx           movb #$01, t5state ; set next state
             000411 xx         
  798  798   000412 3D                  rts
  799  799                              
  800  800                      t5state1: ; Countdown_1
  801  801   000413 B6xx xx             ldaa DONE_1   ;load accumulator A with DONE_1 
  802  802   000416 8101                cmpa #$01     ;check if DONE_1 - 1 = 0 
  803  803   000418 2609                bne t5s1a ; skip reinitialization if DONE_1 is not = 1
  804  804                              
  805  805                              ;reinitialize if DONE_1 = 1 
  806  806                              
  807  807   00041A 1804 xxxx           movw TICKS_1, COUNT_1 ; init COUNT_1
             00041E xxxx       
  808  808   000420 79xx xx             clr DONE_1 ; init DONE_1 to FALSE
  809  809                              
  810  810                             ;after reinitialization, you still decrement
  811  811                              
  812  812   000423 1873 xxxx   t5s1a:  decw COUNT_1    ;decrement COUNT_1
  813  813   000427 2605                bne exit_t5s2   ;if COUNT_1 is not equal to zero, exit 
  814  814   000429 180B 01xx           movb #$01, DONE_1     ;if COUNT_1 is zero, set DONE_1 to 1
             00042D xx         
  815  815                           
  816  816                              
  817  817                      exit_t5s2:
  818  818   00042E 3D                  rts ; exit TASK_5
  819  819                      
  820  820                      
  821  821                      
  822  822                      
  823  823                      
  824  824                      
  825  825                      ;------------------TASK 6--------------------------------------------------
  826  826                      ;pattern 2
  827  827                      
  828  828                      TASK_6: 
  829  829   00042F F7xx xx             tst ON2
  830  830   000432 271B                beq turnofft6
  831  831                      
  832  832   000434 B6xx xx             ldaa t6state ; get current t1state and branch accordingly
  833  833   000437 2720                beq t6state0
  834  834   000439 43                  deca
  835  835   00043A 272E                beq t6state1
  836  836   00043C 43                  deca
  837  837   00043D 273A                beq t6state2
  838  838   00043F 43                  deca
  839  839   000440 2746                beq t6state3
  840  840   000442 43                  deca
  841  841   000443 2752                beq t6state4
  842  842   000445 43                  deca
  843  843   000446 275E                beq t6state5

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  844  844   000448 43                  deca
  845  845   000449 276A                beq t6state6
  846  846   00044B 43                  deca
  847  847   00044C 2776                beq t6state7
  848  848   00044E 3D                  rts ; undefined state - do nothing but return
  849  849                              
  850  850                      turnofft6:
  851  851                              ;changes lights to off
  852  852   00044F 1D02 58C0           bclr PORTP, LED_MSK_2
  853  853   000453 180B 07xx           movb #$07, t6state
             000457 xx         
  854  854   000458 3D                  rts
  855  855                                      
  856  856                              
  857  857                              
  858  858                      t6state0: ; init TASK_1 (not G, not R)
  859  859   000459 79xx xx             clr ON2
  860  860   00045C 1D02 58C0           bclr PORTP, LED_MSK_2 ; ensure that LEDs are off when initialized
  861  861   000460 1C02 5AC0           bset DDRP, LED_MSK_2 ; set LED_MSK_1 pins as PORTS outputs
  862  862   000464 180B 01xx           movb #$01, t6state ; set next state
             000468 xx         
  863  863   000469 3D                  rts
  864  864                              
  865  865                      t6state1: ; G, not R
  866  866   00046A 1C02 5840           bset PORTP, G_LED_2 ; set state1 pattern on LEDs
  867  867   00046E F7xx xx             tst DONE_2 ; check TASK_4 done flag
  868  868   000471 2705                beq exit_t6s1 ; if not done, return
  869  869   000473 180B 02xx           movb #$02, t6state ; otherwise if done, set next state
             000477 xx         
  870  870                      exit_t6s1:
  871  871   000478 3D                  rts
  872  872                              
  873  873                      t6state2: ; not G, not R
  874  874   000479 1D02 5840           bclr PORTP, G_LED_2 ; set state2 pattern on LEDs
  875  875   00047D F7xx xx             tst DONE_2 ; check TASK_1 done flag
  876  876   000480 2705                beq exit_t6s2 ; if not done, return
  877  877   000482 180B 03xx           movb #$03, t6state ; otherwise if done, set next state
             000486 xx         
  878  878                      exit_t6s2:
  879  879   000487 3D                  rts
  880  880                              
  881  881                      t6state3: ; not G, R
  882  882   000488 1C02 5880           bset PORTP, R_LED_2 ; set state3 pattern on LEDs
  883  883   00048C F7xx xx             tst DONE_2 ; check TASK_2 done flag
  884  884   00048F 2705                beq exit_t6s3 ; if not done, return
  885  885   000491 180B 04xx           movb #$04, t6state ; otherwise if done, set next state
             000495 xx         
  886  886                      exit_t6s3:
  887  887   000496 3D                  rts
  888  888                              
  889  889                      t6state4 ; not G, not R
  890  890   000497 1D02 5880           bclr PORTP, R_LED_2 ; set state4 pattern on LEDs
  891  891   00049B F7xx xx             tst DONE_2 ; check TASK_2 done flag
  892  892   00049E 2705                beq exit_t6s4 ; if not done, return
  893  893   0004A0 180B 05xx           movb #$05, t6state ; otherwise if done, set next state
             0004A4 xx         
  894  894                      exit_t6s4:
  895  895   0004A5 3D                  rts
  896  896                              
  897  897                      t6state5: ; G, R
  898  898   0004A6 1C02 58C0           bset PORTP, LED_MSK_2 ; set state5 pattern on LEDs
  899  899   0004AA F7xx xx             tst DONE_2 ; check TASK_2 done flag
  900  900   0004AD 2705                beq exit_t6s5 ; if not done, return
  901  901   0004AF 180B 06xx           movb #$06, t6state ; otherwise if done, set next state

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
             0004B3 xx         
  902  902                      exit_t6s5:
  903  903   0004B4 3D                  rts
  904  904                              
  905  905                      t6state6: ; not G, not R
  906  906   0004B5 1D02 58C0           bclr PORTP, LED_MSK_2 ; set state6 pattern on LEDs
  907  907   0004B9 F7xx xx             tst DONE_2 ; check TASK_2 done flag
  908  908   0004BC 2705                beq exit_t6s6 ; if not done, return
  909  909   0004BE 180B 01xx           movb #$01, t6state ; otherwise if done, set next state
             0004C2 xx         
  910  910                      exit_t6s6:
  911  911   0004C3 3D                  rts ; exit TASK_4
  912  912                              
  913  913                      t6state7: 
  914  914                              
  915  915   0004C4 1D02 58C0           bclr PORTP, LED_MSK_2
  916  916   0004C8 180B 01xx           movb #$01, t6state
             0004CC xx         
  917  917   0004CD 3D                  rts 
  918  918                              
  919  919                      
  920  920                      
  921  921                      
  922  922                      
  923  923                      
  924  924                      
  925  925                      ;------------------TASK 7--------------------------------------------------
  926  926                      ;timing 2
  927  927                      
  928  928   0004CE B6xx xx     TASK_7: ldaa t7state ; get current t2state and branch accordingly
  929  929   0004D1 2704                beq t7state0
  930  930   0004D3 43                  deca
  931  931   0004D4 2710                beq t7state1
  932  932   0004D6 3D                  rts ; undefined state - do nothing but return
  933  933                              
  934  934                      t7state0: ; initialization for TASK_7
  935  935   0004D7 1804 xxxx           movw TICKS_2, COUNT_2 ; init COUNT_2
             0004DB xxxx       
  936  936   0004DD 79xx xx             clr DONE_2 ; init DONE_2 to FALSE
  937  937   0004E0 180B 01xx           movb #$01, t7state ; set next state
             0004E4 xx         
  938  938   0004E5 3D                  rts
  939  939                              
  940  940                      t7state1: ; Countdown_1
  941  941   0004E6 B6xx xx             ldaa DONE_2   ;load accumulator A with DONE_2 
  942  942   0004E9 8101                cmpa #$01     ;check if DONE_2 - 1 = 0 
  943  943   0004EB 2609                bne t7s1a ; skip reinitialization if DONE_2 is not = 1
  944  944                              
  945  945                              ;reinitialize if DONE_2 = 1 
  946  946                              
  947  947   0004ED 1804 xxxx           movw TICKS_2, COUNT_2 ; init COUNT_2
             0004F1 xxxx       
  948  948   0004F3 79xx xx             clr DONE_2 ; init DONE_2 to FALSE
  949  949                              
  950  950                             ;after reinitialization, you still decrement
  951  951                              
  952  952   0004F6 1873 xxxx   t7s1a:  decw COUNT_2    ;decrement COUNT_2
  953  953   0004FA 2605                bne exit_t7s2   ;if COUNT_2 is not equal to zero, exit 
  954  954   0004FC 180B 01xx           movb #$01, DONE_2     ;if COUNT_1 is zero, set DONE_2 to 1
             000500 xx         
  955  955                           
  956  956                              
  957  957                      exit_t7s2:
  958  958   000501 3D                  rts ; exit TASK_7

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  959  959                      
  960  960                      
  961  961                      
  962  962                      
  963  963                      
  964  964                      
  965  965                      ;------------------TASK 8--------------------------------------------------
  966  966                                ;delay
  967  967                                
  968  968   000502 B6xx xx     TASK_8: ldaa t8state ; get current t3state and branch accordingly
  969  969   000505 2704                beq t8state0
  970  970   000507 43                  deca
  971  971   000508 2707                beq t8state1
  972  972   00050A 3D                  rts ; undefined state - do nothing but return
  973  973                      
  974  974                      t8state0: ; initialization for TASK_8
  975  975                              ; no initialization required
  976  976   00050B 180B 01xx           movb #$01, t8state ; set next state
             00050F xx         
  977  977   000510 3D                  rts
  978  978                      
  979  979                      t8state1:
  980  980   000511 16xx xx             jsr DELAY_1ms
  981  981   000514 3D                  rts ; exit TASK_8
  982  982                              
  983  983                              
  984  984                        
  985  985                      ;/------------------------------------------------------------------------------------\
  986  986                      ;| Subroutines                                                                        |
  987  987                      ;\------------------------------------------------------------------------------------/
  988  988                      ; General purpose subroutines go here
  989  989                      
  990  990                        
  991  991                       ;---------------------------------------------------------------------------------------     
  992  992                               
  993  993                        backspace:
  994  994   000515 F7xx xx            tst COUNT
  995  995   000518 2718               beq bkspexit
  996  996   00051A 16xx xx            jsr GETADDR                   ;get current position of LCR
  997  997   00051D 43                 deca                          ;decrement one
  998  998   00051E 16xx xx            jsr SETADDR                   ;set address to new position
  999  999                             ;bgnd
 1000 1000   000521 CExx xx            ldx #BACKSPACE                ;
 1001 1001   000524 16xx xx            jsr OUTSTRING                 ;output a blank character
 1002 1002   000527 16xx xx            jsr GETADDR                   ;get current position of LCR
 1003 1003   00052A 43                 deca                          ;decrement one
 1004 1004   00052B 16xx xx            jsr SETADDR                   ;set address to new position
 1005 1005                             ;bgnd
 1006 1006   00052E 73xx xx            dec COUNT                     ;reset the value of count
 1007 1007   000531 3D                 rts
 1008 1008                        
 1009 1009                      bkspexit:
 1010 1010                      
 1011 1011   000532 3D                 rts
 1012 1012                             
 1013 1013                         
 1014 1014                        
 1015 1015                        ;------CONVERSIONS---------------------------------------------------------------------------;
 1016 1016                      
 1017 1017                      conversion:
 1018 1018                      		
 1019 1019                      		;init here
 1020 1020   000533 1879 xxxx   		clrw RESULT
 1021 1021   000537 79xx xx     		clr TMP

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1022 1022   00053A 79xx xx     		clr ERR
 1023 1023   00053D CExx xx     		ldx #BUFFER
 1024 1024   000540 35          		pshy			;pushes registers to stack so that they remain unchanged by the subroutine
 1025 1025   000541 37          		pshb
 1026 1026   000542 39          		pshc
 1027 1027                      		
 1028 1028                      		
 1029 1029                      convloop:
 1030 1030                      
 1031 1031                      		;loop goes here
 1032 1032   000543 B6xx xx     		ldaa COUNT		;check if COUNT has finished for loop
 1033 1033   000546 272D        		beq loopfin		;branch to exit if COUNT is done
 1034 1034                      		
 1035 1035                      		
 1036 1036   000548 FDxx xx     		ldy RESULT		;load current value of RESULT into register y for use
 1037 1037   00054B CC00 0A     		ldd #$000A		;load hex 10 into accumulator for use
 1038 1038   00054E 13          		emul			    ;multiply register y and acc d
 1039 1039   00054F 18D7        		tsty          ;sets flag for y
 1040 1040   000551 261B        		bne ERR1      ;checks if the multiplication overflowed to y
 1041 1041   000553 7Cxx xx     		std RESULT		;keep the bottom 2 bytes of the emul since we are never dealing with 4 bit nums
 1042 1042                      		
 1043 1043                      		
 1044 1044                      		
 1045 1045   000556 B6xx xx     		ldaa TMP		;TMP is used for index addressing
 1046 1046   000559 E6E4        		ldab a,x		;reference the correct digit in the BUFFER using TMP
 1047 1047   00055B C030        		subb #$30		;subtract $30 to get the decimal value of the ascii code
 1048 1048                      		
 1049 1049                      		
 1050 1050   00055D 87          		clra
 1051 1051   00055E F3xx xx     		addd RESULT		;add RESULT and acc d 
 1052 1052   000561 250B        		bcs ERR1      ;branch if the addition triggers an overflow, causing error 1
 1053 1053   000563 7Cxx xx     		std RESULT		;store addition in RESULT
 1054 1054   000566 72xx xx     		inc TMP		  	;inc TMP so that BUFFER digits are correctly referenced
 1055 1055   000569 73xx xx     		dec COUNT		  ;dec COUNT to track how long the loop has operated for
 1056 1056   00056C 20D5        		bra convloop
 1057 1057                      			
 1058 1058                      
 1059 1059                      ERR1:		
 1060 1060                      
 1061 1061   00056E 180B 01xx   		movb #$01, ERR ;set ERR for MAGNITUDE TOO LARGE
             000572 xx         
 1062 1062   000573 200A        		bra cnvexit
 1063 1063                      	
 1064 1064                      loopfin:
 1065 1065                      		
 1066 1066   000575 FExx xx     		ldx RESULT     ;happens at the end of the loop to check for error 2
 1067 1067   000578 2605        		bne cnvexit	
 1068 1068                      		
 1069 1069                      ERR2:
 1070 1070                      
 1071 1071   00057A 180B 02xx   		movb #$02, ERR  ;set ERR for ZERO MAGNITUDE INAPPROPRIATE
             00057E xx         
 1072 1072                      
 1073 1073                      cnvexit:
 1074 1074                      
 1075 1075   00057F B6xx xx     		ldaa ERR		;load ERRor into accumulator a
 1076 1076   000582 38          		pulc        ;pulls registers from stack to restore them to pre-subroutine states
 1077 1077   000583 33          		pulb
 1078 1078   000584 31          		puly
 1079 1079   000585 3D          		rts         ;return
 1080 1080                              
 1081 1081                      
 1082 1082                      ;-------------------Cooperative Fixed Messaging-------------------------------------------;        
 1083 1083                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1084 1084                      PUTCHAR1:    
 1085 1085   000586 7Exx xx               stx DPTR
 1086 1086   000589 16xx xx               jsr SETADDR
 1087 1087   00058C 79xx xx               clr FIRSTCH
 1088 1088                                
 1089 1089                      PUTCHAR:          
 1090 1090   00058F FExx xx               ldx DPTR
 1091 1091   000592 E600                  ldab 0,x
 1092 1092   000594 2708                  beq mess_exit
 1093 1093   000596 1872 xxxx             incw DPTR
 1094 1094   00059A 16xx xx               jsr OUTCHAR
 1095 1095   00059D 3D                    rts
 1096 1096                      
 1097 1097                      
 1098 1098                      mess_exit:
 1099 1099                      
 1100 1100   00059E 180B 01xx               movb #$01, t3state
             0005A2 xx         
 1101 1101   0005A3 180B 01xx               movb #$01, MSG_NUM
             0005A7 xx         
 1102 1102   0005A8 F7xx xx                 tst F1_FLG
 1103 1103   0005AB 2606                    bne F1addressset
 1104 1104   0005AD F7xx xx                 tst F2_FLG
 1105 1105   0005B0 2607                    bne F2addressset
 1106 1106   0005B2 3D                      rts
 1107 1107                                  
 1108 1108                      F1addressset:
 1109 1109                      
 1110 1110   0005B3 8608                  ldaa #$08
 1111 1111   0005B5 16xx xx               jsr SETADDR
 1112 1112   0005B8 3D                    rts
 1113 1113                                
 1114 1114                      F2addressset:
 1115 1115                      
 1116 1116   0005B9 8648                  ldaa #$48
 1117 1117   0005BB 16xx xx               jsr SETADDR 
 1118 1118   0005BE 3D                    rts 
 1119 1119                      
 1120 1120                      ;-------------------Cooperative Fixed init message-----------------------
 1121 1121                      
 1122 1122                      ICHAR1: 
 1123 1123   0005BF 7Exx xx               stx DPTR
 1124 1124   0005C2 16xx xx               jsr SETADDR
 1125 1125   0005C5 79xx xx               clr FIRSTCH
 1126 1126                                
 1127 1127                      ICHAR:        
 1128 1128   0005C8 FExx xx               ldx DPTR
 1129 1129   0005CB E600                  ldab 0,x
 1130 1130   0005CD 27CF                  beq mess_exit
 1131 1131   0005CF 1872 xxxx             incw DPTR
 1132 1132   0005D3 16xx xx               jsr OUTCHAR
 1133 1133   0005D6 16xx xx               jsr GETADDR
 1134 1134   0005D9 8128                  cmpa #$28
 1135 1135   0005DB 2701                  beq changeline
 1136 1136   0005DD 3D                    rts
 1137 1137                      
 1138 1138                      changeline: 
 1139 1139                      
 1140 1140   0005DE 8640                  ldaa #$40
 1141 1141   0005E0 16xx xx               jsr SETADDR
 1142 1142   0005E3 3D                    rts
 1143 1143                      
 1144 1144                      
 1145 1145                      ;----------------------DElay----------------------------

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1146 1146                      
 1147 1147                      DELAY_1ms:
 1148 1148   0005E4 CD05 84             ldy #$0584
 1149 1149                              INNER: ; inside loop
 1150 1150   0005E7 8D00 00             cpy #0
 1151 1151   0005EA 2703                beq EXIT
 1152 1152   0005EC 03                  dey
 1153 1153   0005ED 20F8                bra INNER
 1154 1154                              EXIT:
 1155 1155   0005EF 3D                  rts ; exit DELAY_1ms
 1156 1156                              
 1157 1157                              
 1158 1158                              
 1159 1159                      ;-----------------clearbuffer----------------------   
 1160 1160                      
 1161 1161                      clearbuffer:
 1162 1162                      
 1163 1163   0005F0 CExx xx           ldx #BUFFER
 1164 1164   0005F3 8600              ldaa #$00
 1165 1165   0005F5 69E4              clr a, x
 1166 1166   0005F7 42                inca
 1167 1167   0005F8 69E4              clr a, x
 1168 1168   0005FA 42                inca
 1169 1169   0005FB 69E4              clr a, x
 1170 1170   0005FD 42                inca
 1171 1171   0005FE 69E4              clr a, x
 1172 1172   000600 42                inca
 1173 1173   000601 69E4              clr a, x
 1174 1174   000603 3D                rts
 1175 1175                      
 1176 1176                      
 1177 1177                      ;/------------------------------------------------------------------------------------\
 1178 1178                      ;| ASCII Messages and Constant Data                                                   |
 1179 1179                      ;\------------------------------------------------------------------------------------/
 1180 1180                      ; Any constants can be defined here
 1181 1181                      
 1182 1182   000604 5449 4D45    INITMSG: DC.B 'TIME1 =       <F1> to update LED1 periodTIME2 =       <F2> to update LED1 period', $00
             000608 3120 3D20  
             00060C 2020 2020  
             000610 2020 3C46  
             000614 313E 2074  
             000618 6F20 7570  
             00061C 6461 7465  
             000620 204C 4544  
             000624 3120 7065  
             000628 7269 6F64  
             00062C 5449 4D45  
             000630 3220 3D20  
             000634 2020 2020  
             000638 2020 3C46  
             00063C 323E 2074  
             000640 6F20 7570  
             000644 6461 7465  
             000648 204C 4544  
             00064C 3120 7065  
             000650 7269 6F64  
             000654 00         
 1183 1183   000655 5449 4D45    TIME1:  DC.B 'TIME1 =       <F1> to update LED1 period', $00
             000659 3120 3D20  
             00065D 2020 2020  
             000661 2020 3C46  
             000665 313E 2074  
             000669 6F20 7570  
             00066D 6461 7465  

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
             000671 204C 4544  
             000675 3120 7065  
             000679 7269 6F64  
             00067D 00         
 1184 1184   00067E 5449 4D45    TIME2:  DC.B 'TIME2 =       <F2> to update LED1 period', $00
             000682 3220 3D20  
             000686 2020 2020  
             00068A 2020 3C46  
             00068E 323E 2074  
             000692 6F20 7570  
             000696 6461 7465  
             00069A 204C 4544  
             00069E 3120 7065  
             0006A2 7269 6F64  
             0006A6 00         
 1185 1185   0006A7 5449 4D45    NODIG1: DC.B 'TIME1 = NO DIGITS ENTERED               ', $00
             0006AB 3120 3D20  
             0006AF 4E4F 2044  
             0006B3 4947 4954  
             0006B7 5320 454E  
             0006BB 5445 5245  
             0006BF 4420 2020  
             0006C3 2020 2020  
             0006C7 2020 2020  
             0006CB 2020 2020  
             0006CF 00         
 1186 1186   0006D0 5449 4D45    NODIG2: DC.B 'TIME2 = NO DIGITS ENTERED               ', $00
             0006D4 3220 3D20  
             0006D8 4E4F 2044  
             0006DC 4947 4954  
             0006E0 5320 454E  
             0006E4 5445 5245  
             0006E8 4420 2020  
             0006EC 2020 2020  
             0006F0 2020 2020  
             0006F4 2020 2020  
             0006F8 00         
 1187 1187   0006F9 5449 4D45    ZMAG1:  DC.B 'TIME1 = ZERO MAGNITUDE INAPPROPRIATE    ', $00
             0006FD 3120 3D20  
             000701 5A45 524F  
             000705 204D 4147  
             000709 4E49 5455  
             00070D 4445 2049  
             000711 4E41 5050  
             000715 524F 5052  
             000719 4941 5445  
             00071D 2020 2020  
             000721 00         
 1188 1188   000722 5449 4D45    ZMAG2:  DC.B 'TIME2 = ZERO MAGNITUDE INAPPROPRIATE    ', $00
             000726 3220 3D20  
             00072A 5A45 524F  
             00072E 204D 4147  
             000732 4E49 5455  
             000736 4445 2049  
             00073A 4E41 5050  
             00073E 524F 5052  
             000742 4941 5445  
             000746 2020 2020  
             00074A 00         
 1189 1189   00074B 5449 4D45    MAGTL1: DC.B 'TIME1 = MAGNITUDE TOO LARGE             ', $00
             00074F 3120 3D20  
             000753 4D41 474E  
             000757 4954 5544  
             00075B 4520 544F  

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
             00075F 4F20 4C41  
             000763 5247 4520  
             000767 2020 2020  
             00076B 2020 2020  
             00076F 2020 2020  
             000773 00         
 1190 1190   000774 5449 4D45    MAGTL2: DC.B 'TIME2 = MAGNITUDE TOO LARGE             ', $00
             000778 3220 3D20  
             00077C 4D41 474E  
             000780 4954 5544  
             000784 4520 544F  
             000788 4F20 4C41  
             00078C 5247 4520  
             000790 2020 2020  
             000794 2020 2020  
             000798 2020 2020  
             00079C 00         
 1191 1191   00079D 2000         BACKSPACE: DC.B ' ' , $00 
 1192 1192                       
 1193 1193                       
 1194 1194                      ;/------------------------------------------------------------------------------------\
 1195 1195                      ;| Vectors                                                                            |
 1196 1196                      ;\------------------------------------------------------------------------------------/
 1197 1197                      ; Add interrupt and reset vectors here
 1198 1198                      
 1199 1199                              ORG   $FFFE                    ; reset vector address
 1200 1200  a00FFFE xxxx                DC.W  Entry
 1201 1201                      
