
Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
    1    1                      ;**************************************************************************************
    2    2                      ;* Lab 3 Main [includes LibV2.2]                                                      *
    3    3                      ;**************************************************************************************
    4    4                      ;* Summary:                                                                           *
    5    5                      ;*   Main For Lab 3, DUE 11/02/2023                                                                                *
    6    6                      ;*                                                                                    *
    7    7                      ;* Author: Aiden Taylor & Julia Fay                                                   *
    8    8                      ;*   Cal Poly University                                                              *
    9    9                      ;*   Fall 2023                                                                        *
   10   10                      ;*                                                                                    *
   11   11                      ;* Revision History:                                                                  *
   12   12                      ;*   -                                                                                *
   13   13                      ;*                                                                                    *
   14   14                      ;* ToDo:                                                                              *
   15   15                      ;*    -DONE!
   16   16                      ;* 
   17   17                      ;* 
   18   18                      ;**************************************************************************************
   19   19                      
   20   20                      ;/------------------------------------------------------------------------------------\
   21   21                      ;| Include all associated files                                                       |
   22   22                      ;\------------------------------------------------------------------------------------/
   23   23                      ; The following are external files to be included during assembly
   24   24                      
   25   25                      
   26   26                      ;/------------------------------------------------------------------------------------\
   27   27                      ;| External Definitions                                                               |
   28   28                      ;\------------------------------------------------------------------------------------/
   29   29                      ; All labels that are referenced by the linker need an external definition
   30   30                      
   31   31                                    XDEF  main
   32   32                      
   33   33                      ;/------------------------------------------------------------------------------------\
   34   34                      ;| External References                                                                |
   35   35                      ;\------------------------------------------------------------------------------------/
   36   36                      ; All labels from other files must have an external reference
   37   37                      
   38   38                                    XREF  ENABLE_MOTOR, DISABLE_MOTOR
   39   39                                    XREF  STARTUP_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR
   40   40                                    XREF  STARTUP_PWM, STARTUP_ATD0, STARTUP_ATD1
   41   41                                    XREF  OUTDACA, OUTDACB
   42   42                                    XREF  STARTUP_ENCODER, READ_ENCODER
   43   43                                    XREF  INITLCD, SETADDR, GETADDR, CURSOR_ON, CURSOR_OFF, DISP_OFF
   44   44                                    XREF  OUTCHAR, OUTCHAR_AT, OUTSTRING, OUTSTRING_AT
   45   45                                    XREF  INITKEY, LKEY_FLG, GETCHAR
   46   46                                    XREF  LCDTEMPLATE, UPDATELCD_L1, UPDATELCD_L2
   47   47                                    XREF  LVREF_BUF, LVACT_BUF, LERR_BUF,LEFF_BUF, LKP_BUF, LKI_BUF
   48   48                                    XREF  Entry, ISR_KEYPAD
   49   49                                  
   50   50                      ;/------------------------------------------------------------------------------------\
   51   51                      ;| Assembler Equates                                                                  |
   52   52                      ;\------------------------------------------------------------------------------------/
   53   53                      ; Constant values can be equated here
   54   54                      
   55   55          0000 0258   PORTP EQU $0258 ; output port for LEDs
   56   56          0000 025A   DDRP EQU $025A
   57   57          0000 0010   G_LED_1 EQU %00010000 ; green LED output pin for LED pair_1
   58   58          0000 0020   R_LED_1 EQU %00100000 ; red LED output pin for LED pair_1
   59   59          0000 0030   LED_MSK_1 EQU %00110000 ; LED pair_1
   60   60          0000 0040   G_LED_2 EQU %01000000 ; green LED output pin for LED pair_2
   61   61          0000 0080   R_LED_2 EQU %10000000 ; red LED output pin for LED pair_2
   62   62          0000 00C0   LED_MSK_2 EQU %11000000 ; LED pair_2
   63   63                      
   64   64                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
   65   65                      
   66   66                      ;/------------------------------------------------------------------------------------\
   67   67                      ;| Variables in RAM                                                                   |
   68   68                      ;\------------------------------------------------------------------------------------/
   69   69                      ; The following variables are located in unpaged ram
   70   70                      
   71   71                      DEFAULT_RAM:  SECTION
   72   72                      
   73   73                      ;params for t1 
   74   74                      
   75   75   000000             COUNT DS.B 1
   76   76   000001             F1_FLG  DS.B 1
   77   77   000002             F2_FLG  DS.B 1
   78   78   000003             ON1     DS.B 1 
   79   79   000004             ON2     DS.B 1 
   80   80   000005             MM_ERR  DS.B 1 
   81   81                      
   82   82                      ;params for t2 
   83   83   000006             KEY_FLG DS.B 1
   84   84   000007             KEY_BUFF DS.B 1
   85   85                      
   86   86                      ;params for t3
   87   87   000008             MSG_NUM DS.B 1
   88   88   000009             LNUM DS.B 1
   89   89                      
   90   90                      
   91   91                      ;params for t4
   92   92                      
   93   93   00000A             DONE_1 DS.B 1
   94   94                      
   95   95                      ;params for t5
   96   96                      
   97   97   00000B             TICKS_1 DS.W 1
   98   98   00000D             COUNT_1 DS.W 1
   99   99                      
  100  100                      ;params for t6
  101  101                      
  102  102   00000F             DONE_2 DS.B 1
  103  103                      
  104  104                      ;params for t7
  105  105                      
  106  106   000010             TICKS_2 DS.W 1
  107  107   000012             COUNT_2 DS.W 1
  108  108                      
  109  109                      ;params for t8
  110  110                      
  111  111                          ;delay
  112  112                      
  113  113                      
  114  114                      ;state vars
  115  115   000014             t1state DS.B 1
  116  116   000015             t2state DS.B 1
  117  117   000016             t3state DS.B 1
  118  118   000017             t4state DS.B 1
  119  119   000018             t5state DS.B 1
  120  120   000019             t6state DS.B 1
  121  121   00001A             t7state DS.B 1
  122  122   00001B             t8state DS.B 1
  123  123                      
  124  124                      ;subroutines ---------
  125  125                      
  126  126                      ;convert
  127  127   00001C             RESULT DS.W 1 
  128  128   00001E             BUFFER DS.B 5

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  129  129   000023             TMP DS.B 1
  130  130   000024             ERR DS.B 1 
  131  131                      
  132  132                      ;input
  133  133   000025             INPUT DS.B 1
  134  134   000026             DPTR DS.W 1
  135  135   000028             FIRSTCH DS.B 1
  136  136                      
  137  137                      ;display
  138  138   000029             COUNT_ERR DS.W 1
  139  139   00002B             TICKS_ERR DS.W 1
  140  140                      
  141  141                      ;/------------------------------------------------------------------------------------\
  142  142                      ;|  Main Program Code                                                                 |
  143  143                      ;\------------------------------------------------------------------------------------/
  144  144                      ; Your code goes here
  145  145                      
  146  146                      MyCode:       SECTION
  147  147                      main:  
  148  148   000000 79xx xx            clr t1state ; initialize all tasks to state0
  149  149   000003 79xx xx            clr t2state
  150  150   000006 79xx xx            clr t3state
  151  151   000009 79xx xx            clr t4state
  152  152   00000C 79xx xx            clr t5state
  153  153   00000F 79xx xx            clr t6state
  154  154   000012 79xx xx            clr t7state
  155  155   000015 79xx xx            clr t8state
  156  156                             
  157  157                      Top:
  158  158                              ;bgnd
  159  159   000018 16xx xx             jsr TASK_1 ; execute tasks endlessly
  160  160   00001B 16xx xx             jsr TASK_2
  161  161   00001E 16xx xx             jsr TASK_3
  162  162   000021 16xx xx             jsr TASK_4
  163  163   000024 16xx xx             jsr TASK_5
  164  164   000027 16xx xx             jsr TASK_6
  165  165   00002A 16xx xx             jsr TASK_7
  166  166   00002D 16xx xx             jsr TASK_8
  167  167   000030 20E6                bra Top       
  168  168                             
  169  169   000032 20FE        spin: bra spin
  170  170                      
  171  171                      ;-------------TASK_1 MASTERMIND ---------------------------------------------------------
  172  172                      
  173  173                      TASK_1: 
  174  174                              ;bgnd
  175  175   000034 B6xx xx             ldaa t1state ; get current t1state and branch accordingly
  176  176   000037 2722                beq t1s0
  177  177   000039 43                  deca
  178  178   00003A 273A                beq t1s1
  179  179   00003C 43                  deca
  180  180   00003D 1827 0093           lbeq t1s2
  181  181   000041 43                  deca
  182  182   000042 1827 00D6           lbeq t1s3
  183  183   000046 43                  deca
  184  184   000047 1827 0155           lbeq t1s4
  185  185   00004B 43                  deca
  186  186   00004C 1827 0161           lbeq t1s5
  187  187   000050 43                  deca
  188  188   000051 1827 017B           lbeq t1s6
  189  189   000055 43                  deca
  190  190   000056 1827 0195           lbeq t1s7
  191  191   00005A 3D                  rts ; undefined state - do nothing but return
  192  192                      ;__________________________________________________________________________________

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  193  193                      t1s0: ; init TASK_1
  194  194                      
  195  195                      ;clear all of the flags 
  196  196   00005B 79xx xx             clr TICKS_1
  197  197   00005E 79xx xx             clr TICKS_2
  198  198   000061 79xx xx             clr F1_FLG 
  199  199   000064 79xx xx             clr F2_FLG 
  200  200   000067 79xx xx             clr KEY_FLG 
  201  201   00006A 79xx xx             clr COUNT
  202  202   00006D 16xx xx             jsr clearbuffer   
  203  203   000070 180B 01xx           movb #$01, t1state ; set next state
             000074 xx         
  204  204   000075 3D                  rts
  205  205                      ;__________________________________________________________________________________
  206  206                      t1s1: ;
  207  207                      
  208  208   000076 F7xx xx             tst KEY_FLG                                 ;first test if there is a key to be checked
  209  209   000079 1827 01C6           lbeq exit1                                  ;if there is no key exit
  210  210                      
  211  211                      
  212  212                      ;check if its F1
  213  213                       
  214  214                              ;bgnd
  215  215   00007D B6xx xx             ldaa KEY_BUFF                               ;load accumulator A with the current char
  216  216   000080 F7xx xx             tst F1_FLG
  217  217   000083 260F                bne skipF1
  218  218   000085 F7xx xx             tst F2_FLG
  219  219   000088 260A                bne skipF1                                  ;skip if F1 has already been pressed
  220  220   00008A 81F1                cmpa #$F1                                   ;compare whats in A to F1 
  221  221   00008C 2606                bne skipF1                                  ;if its not F1, skip settting the state
  222  222   00008E 180B 05xx           movb #$05 , t1state                         ;set the state to the appropriate number  
             000092 xx         
  223  223   000093 3D                  rts
  224  224                      
  225  225                      skipF1:  
  226  226                      
  227  227                      ;check if its F2
  228  228                                                
  229  229   000094 F7xx xx             tst F2_FLG 
  230  230   000097 2612                bne skipF2                                  ;skip if F1 has already been pressed
  231  231   000099 F7xx xx             tst F1_FLG
  232  232   00009C 260D                bne skipF2
  233  233   00009E 81F2                cmpa #$F2                                   ;compare whats in A to F2
  234  234   0000A0 2609                bne skipF2                                  ;if its not F2, skip settting the state
  235  235   0000A2 F7xx xx             tst F2_FLG
  236  236   0000A5 180B 06xx           movb #$06 , t1state                         ;set the state to the appropriate number 
             0000A9 xx         
  237  237   0000AA 3D                  rts
  238  238                      
  239  239                      skipF2:
  240  240                      
  241  241                      ;check if its a BS 
  242  242                             
  243  243   0000AB 8108                cmpa #$08                                    ;compare whats in A to BS 
  244  244   0000AD 2606                bne skipBS                                  ;if its not BS, skip settting the state 
  245  245   0000AF 180B 04xx           movb #$04 , t1state                         ;set the state to the appropriate number 
             0000B3 xx         
  246  246   0000B4 3D                  rts
  247  247                      
  248  248                      skipBS: 
  249  249                      
  250  250                      ;check if its a ENT  
  251  251                      
  252  252   0000B5 810A                cmpa #$0A                                    ;compare whats in A to ENT 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  253  253   0000B7 2606                bne skipENT                                 ;if its not BS, skip settting the state 
  254  254   0000B9 180B 03xx           movb #$03 , t1state                         ;set the state to the appropriate number 
             0000BD xx         
  255  255   0000BE 3D                  rts
  256  256                              
  257  257                      skipENT: 
  258  258                      
  259  259                      ;check if its a digit 
  260  260                              ;bgnd
  261  261   0000BF 36                  psha
  262  262   0000C0 33                  pulb
  263  263   0000C1 8600                ldaa #$00
  264  264                              
  265  265   0000C3 8C00 39             cpd #$39                                   ;check if what in A is a number 
  266  266   0000C6 2E08                bgt skipDIGIT                               ;if its not a number, disregard the input
  267  267   0000C8 37                  pshb
  268  268   0000C9 32                  pula
  269  269                               
  270  270   0000CA 180B 02xx           movb #$02 , t1state                         ;set the state to digit handler 
             0000CE xx         
  271  271   0000CF 3D                  rts
  272  272                      
  273  273                      skipDIGIT: 
  274  274                      
  275  275   0000D0 79xx xx             clr KEY_FLG
  276  276   0000D3 3D                  rts
  277  277                      
  278  278                      ;___________________________________________________________________________________
  279  279                      
  280  280                      t1s2: ;Digit Handler 
  281  281                      
  282  282                      ;checks if we should proceed with the digit handler state 
  283  283   0000D4 F6xx xx             ldab COUNT
  284  284   0000D7 C105                cmpb #$05
  285  285   0000D9 2716                beq toomany
  286  286   0000DB F7xx xx             tst F1_FLG                                  ;test F1 flag 
  287  287   0000DE 261A                bne skip_e                                  ;if not equal to 0, skip exiting 
  288  288   0000E0 F7xx xx             tst F2_FLG                                  ;test the F2 flag 
  289  289   0000E3 2615                bne skip_e                                  ;if not equal to 0, skip exiting 
  290  290   0000E5 79xx xx             clr KEY_FLG
  291  291   0000E8 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             0000EC xx         
  292  292   0000ED 1820 0152           lbra exit1                                   ;exit if equal to 0 
  293  293                      
  294  294                      toomany:
  295  295   0000F1 180B 01xx           movb #$01, t1state
             0000F5 xx         
  296  296   0000F6 79xx xx             clr KEY_FLG
  297  297   0000F9 3D                  rts
  298  298                      
  299  299                      skip_e:
  300  300                      
  301  301                      ;now proceed with the digit handler
  302  302                         
  303  303   0000FA CDxx xx             ldy #BUFFER                                 ;load index register y with buffer 
  304  304   0000FD B6xx xx             ldaa COUNT                                  ;load A with the current value of COUNT 
  305  305   000100 F6xx xx             ldab KEY_BUFF                               ;load b with KEY_BUFF 
  306  306   000103 6BEC                stab a,y                                    ;store the contents of b at the position of COUNT in BUFFER
  307  307                             
  308  308   000105 72xx xx             inc COUNT                                   ;increment count 
  309  309   000108 180B 00xx           movb #$00, KEY_FLG                          ;set key flag to 0 to acknowledge KEYPAD
             00010C xx         
  310  310   00010D 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             000111 xx         

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  311  311   000112 79xx xx             clr KEY_FLG                                 ;clear key flag 
  312  312   000115 16xx xx             jsr OUTCHAR
  313  313   000118 1820 0127           lbra exit1                                   ;exit 
  314  314                      ;________________________________________________________________________________________
  315  315                      t1s3: ;ENT 
  316  316                       
  317  317                      
  318  318                      ;before jsr to conversion, check if any digits have been entered into buffer      
  319  319                            
  320  320   00011C 16xx xx            jsr clrcurs
  321  321                             
  322  322   00011F F7xx xx            tst COUNT                                   ;test the current value of count 
  323  323   000122 2604               bne skip_NO_DIGITS                          ;if the count is not zero, branch 
  324  324   000124 8603               ldaa #$03                                   ;if the count is zero, put an error code into A 
  325  325   000126 2023               bra skip_F2                                 ;branch to the set error state below 
  326  326                             
  327  327                      
  328  328                      skip_NO_DIGITS: 
  329  329                      
  330  330                      ;send to conversion to get a BCD form of the input 
  331  331                          
  332  332   000128 16xx xx            jsr conversion                              ;convert the contents of buffer to binary 
  333  333   00012B 79xx xx            clr COUNT                                   ;set count back to zero 
  334  334   00012E 79xx xx            clr BUFFER                                  ;clear the contents of the BUFFER
  335  335                             
  336  336                      ;check which ON flag to set 
  337  337                       
  338  338   000131 F7xx xx            tst F1_FLG                                  ;test the F1 flag
  339  339   000134 2708               beq skip_F1_a                               ;if the flag is zero, skip the next steps 
  340  340   000136 180B 01xx          movb #01, ON1                               ;if the flag is 1, set ON1 to be true
             00013A xx         
  341  341   00013B 7Exx xx            stx TICKS_1                                 ;store the results of the conversion 
  342  342                               
  343  343                      skip_F1_a:  
  344  344                       
  345  345   00013E F7xx xx            tst F2_FLG                                  ;test the F2 flag
  346  346   000141 2708               beq skip_F2                                 ;if the flag is zero, skip the next steps 
  347  347   000143 180B 01xx          movb #$01, ON2                              ;if the flag is 1, set ON2 to be true
             000147 xx         
  348  348   000148 7Exx xx            stx TICKS_2                                 ;store the results of the conversion
  349  349                      
  350  350                      skip_F2:
  351  351                      
  352  352                      ;automatically set the state back to 1 for all cases  
  353  353                      
  354  354   00014B 180B 01xx          movb #$01, t1state                          ;set the state back to 1 
             00014F xx         
  355  355                             
  356  356                      ;check for error and set variables accordingly so that user has to start over 
  357  357                      
  358  358                             ;bgnd
  359  359   000150 8100               cmpa #$00                                   ;check whats in A 
  360  360   000152 272F               beq skipERROR                               ;check if an error was generated from conversion
  361  361   000154 180B 07xx          movb #$07, t1state                          ;if there is an error code set the state to the 
             000158 xx         
  362  362                                                                         ;error state
  363  363   000159 7Axx xx            staa MM_ERR                                 ;store the error code of accumulator A into a variable 
  364  364                                                                         ;so it is not affected by other code before it gets to 
  365  365                                                                         ;the error state                                              
  366  366                                                                           
  367  367                      ;check which ON variable needs to be cleared if there is an error 
  368  368                            ;bgnd
  369  369   00015C F7xx xx           tst F1_FLG                                   ;test the F1 flag
  370  370   00015F 270A              beq skip_F1_b                                ;if the flag is zero, skip the next steps 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  371  371   000161 79xx xx           clr ON1                                      ;clear ON1
  372  372   000164 79xx xx           clr TICKS_1                                  ;clear TICKS_1
  373  373   000167 1820 00D8         lbra exit1
  374  374                            
  375  375                      skip_F1_b: 
  376  376                       
  377  377   00016B F7xx xx           tst F2_FLG                                   ;test the F2 flag
  378  378   00016E 2713              beq skipERROR                                ;if the flag is zero, skip the next steps
  379  379   000170 79xx xx           clr ON2                                      ;clear ON2 
  380  380   000173 79xx xx           clr TICKS_2                                  ;clear TICKS_2
  381  381   000176 79xx xx           clr KEY_FLG                                  ;clear key flag
  382  382   000179 16xx xx           jsr clearbuffer
  383  383   00017C 16xx xx           jsr CURSOR_OFF   
  384  384   00017F 1820 00C0         lbra exit1                                   ;exit without clearing F1 and F2 flags 
  385  385                                        
  386  386                      skipERROR:
  387  387                      
  388  388                      ;if there are no errors, clear the F1 and F2 flags and exit     
  389  389                            
  390  390   000183 16xx xx           jsr clearbuffer
  391  391   000186 16xx xx           jsr CURSOR_OFF 
  392  392   000189 79xx xx           clr KEY_FLG 
  393  393   00018C 79xx xx           clr F1_FLG 
  394  394   00018F 79xx xx           clr F2_FLG
  395  395   000192 180B 01xx         movb #$01, DONE_1
             000196 xx         
  396  396   000197 180B 01xx         movb #$01, DONE_2  
             00019B xx         
  397  397   00019C 1820 00A3         lbra exit1                                    ;exit
  398  398                       ;________________________________________________________________________________________
  399  399                      t1s4: ;BS
  400  400                       
  401  401   0001A0 180B 02xx          movb #$02 , t3state                         ;set the state in task 3 to the BS state   
             0001A4 xx         
  402  402   0001A5 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001A9 xx         
  403  403   0001AA 79xx xx            clr KEY_FLG 
  404  404   0001AD 1820 0092          lbra exit1                                   ;exit
  405  405                       ;________________________________________________________________________________________
  406  406                      t1s5: ;F1 state 
  407  407                       
  408  408                             
  409  409   0001B1 180B 01xx          movb #$01, F1_FLG                           ;set the F1_FLG to be true
             0001B5 xx         
  410  410   0001B6 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001BA xx         
  411  411   0001BB 79xx xx            clr ON1 
  412  412   0001BE 79xx xx            clr KEY_FLG
  413  413   0001C1 8608               ldaa #$08
  414  414   0001C3 16xx xx            jsr SETADDR
  415  415   0001C6 16xx xx            jsr CURSOR_ON
  416  416   0001C9 180B 03xx          movb #$03, MSG_NUM
             0001CD xx         
  417  417   0001CE 2073               bra exit1                                   ;exit
  418  418                             
  419  419                       ;________________________________________________________________________________________
  420  420                      t1s6: ;F2 state 
  421  421                       
  422  422   0001D0 180B 01xx          movb #$01, F2_FLG                           ;set the F2_FLG to be true
             0001D4 xx         
  423  423   0001D5 180B 01xx          movb #$01 , t1state                         ;set the state back to 1
             0001D9 xx         
  424  424   0001DA 79xx xx            clr ON2
  425  425   0001DD 79xx xx            clr KEY_FLG

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  426  426   0001E0 8648               ldaa #$48
  427  427   0001E2 16xx xx            jsr SETADDR
  428  428   0001E5 16xx xx            jsr CURSOR_ON
  429  429   0001E8 180B 04xx          movb #$04, MSG_NUM 
             0001EC xx         
  430  430   0001ED 2054               bra exit1                                   ;exit
  431  431                      
  432  432                      ;________________________________________________________________________________________
  433  433                      t1s7: ;Error state 
  434  434                      
  435  435                      
  436  436                      ;checks the error code in accumulator A and which F flag is set to set the appropiate fixed 
  437  437                      ;message state to be displayed through task 3 
  438  438                      
  439  439                      ;split the code into two sections. the F1 and F2 sections 
  440  440                        
  441  441                      ;fist test the F1 flag 
  442  442                             ;bgnd
  443  443   0001EF B6xx xx            ldaa MM_ERR
  444  444   0001F2 F7xx xx            tst F1_FLG                                   ;test the F1 flag
  445  445   0001F5 271B               beq skip_F1_e                                ;if the flag is zero, skip the next steps    
  446  446                       
  447  447                      ;now check the error number and set the message number for task 3 
  448  448                       
  449  449                                                               ;put the error number back into accumulator a 
  450  450   0001F7 8101               cmpa #01                                     ;check if the error code is mag to large 
  451  451   0001F9 2605               bne skip_F1_toolarge                         ;skip setting the message num
  452  452   0001FB 180B 09xx          movb #$09, MSG_NUM                           ;set the appropiate message num 
             0001FF xx         
  453  453                      
  454  454                      skip_F1_toolarge: 
  455  455                      
  456  456   000200 8102               cmpa #02                                     ;check if the error code is zero magnitude 
  457  457   000202 2605               bne skip_F1_zeromag                          ;skip setting the message num
  458  458   000204 180B 07xx          movb #$07, MSG_NUM                           ;set the appropiate message num 
             000208 xx         
  459  459                      
  460  460                      skip_F1_zeromag: 
  461  461                      
  462  462   000209 8103               cmpa #03                                     ;check if the error code is zero digits
  463  463   00020B 2605               bne skip_F1_e                                ;skip setting the message num
  464  464   00020D 180B 05xx          movb #$05, MSG_NUM                           ;set the appropiate message num    
             000211 xx         
  465  465                         
  466  466                      skip_F1_e: 
  467  467                       
  468  468                      ;now test the F2 flag 
  469  469                       
  470  470   000212 F7xx xx            tst F2_FLG                                   ;test the F1 flag
  471  471   000215 271B               beq skip_F2_e                                ;if the flag is zero, skip the next steps    
  472  472                       
  473  473                      ;now check the error number and set the message number for task 3 
  474  474                       
  475  475   000217 8101               cmpa #01                                     ;check if the error code is mag to large 
  476  476   000219 2605               bne skip_F2_toolarge                         ;skip setting the message num
  477  477   00021B 180B 0Axx          movb #$0A, MSG_NUM                           ;set the appropiate message num 
             00021F xx         
  478  478                      
  479  479                      skip_F2_toolarge: 
  480  480                      
  481  481   000220 8102               cmpa #02                                     ;check if the error code is zero magnitude 
  482  482   000222 2605               bne skip_F2_zeromag                          ;skip setting the message num
  483  483   000224 180B 08xx          movb #$08, MSG_NUM                           ;set the appropiate message num 
             000228 xx         

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  484  484                      
  485  485                      skip_F2_zeromag: 
  486  486                      
  487  487   000229 8103               cmpa #03                                     ;check if the error code is zero digits
  488  488   00022B 2605               bne skip_F2_e                                ;skip setting the message num
  489  489   00022D 180B 06xx          movb #$06, MSG_NUM                           ;set the appropiate message num 
             000231 xx         
  490  490                       
  491  491                      skip_F2_e: 
  492  492                      
  493  493                       ;clear the F1 and F2 flags and fall through to the exit 
  494  494                      
  495  495   000232 79xx xx             clr F1_FLG 
  496  496   000235 79xx xx             clr F2_FLG
  497  497   000238 180B 01xx           movb #$01 , t1state                         ;set the state back to 1
             00023C xx         
  498  498   00023D 16xx xx             jsr clearbuffer
  499  499   000240 79xx xx             clr KEY_FLG
  500  500                      
  501  501                      exit1:
  502  502                              ;clr KEY_FLG
  503  503   000243 3D                  rts
  504  504                      ;----------------------TASK 2 - KEYPAD -------------------------------------------; 
  505  505                       
  506  506                      TASK_2:
  507  507                       
  508  508                              ;bgnd
  509  509   000244 B6xx xx             ldaa t2state ;get state
  510  510   000247 2707                beq t2s0
  511  511   000249 43                  deca
  512  512   00024A 270D                beq t2s1
  513  513   00024C 43                  deca
  514  514   00024D 2721                beq t2s2
  515  515   00024F 3D                  rts
  516  516                      
  517  517                      t2s0:
  518  518                      
  519  519                              ;init
  520  520                              
  521  521   000250 16xx xx             jsr INITKEY       ;initialize keypad
  522  522   000253 180B 01xx           movb #$01, t2state
             000257 xx         
  523  523   000258 3D                  rts
  524  524                              
  525  525                      t2s1:     
  526  526                         
  527  527   000259 F7xx xx             tst LKEY_FLG
  528  528   00025C 271C                beq exit2
  529  529   00025E 16xx xx             jsr GETCHAR
  530  530   000261 7Bxx xx             stab KEY_BUFF     ;stores the input char into key buffer
  531  531   000264 180B 01xx           movb #$01, KEY_FLG        ;notifies MM of key input
             000268 xx         
  532  532   000269 180B 02xx           movb #$02, t2state
             00026D xx         
  533  533   00026E 200A                bra exit2                                   ;exit
  534  534                              
  535  535                      t2s2:
  536  536                      
  537  537   000270 F7xx xx             tst KEY_FLG
  538  538   000273 2605                bne exit2
  539  539   000275 180B 01xx           movb #$01, t2state
             000279 xx         
  540  540                              
  541  541                      

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  542  542   00027A 3D          exit2: rts        
  543  543                              
  544  544                              
  545  545                      ;---------------------TASK 3 - DISPLAY ---------------------------------------------;
  546  546                      
  547  547                      TASK_3:
  548  548                      
  549  549   00027B B6xx xx             ldaa t3state
  550  550   00027E 272E                beq t3s0
  551  551   000280 43                  deca
  552  552   000281 2744                beq t3s1
  553  553   000283 43                  deca
  554  554   000284 2752                beq t3s2
  555  555   000286 43                  deca
  556  556   000287 2758                beq t3s3
  557  557   000289 43                  deca
  558  558   00028A 2768                beq t3s4
  559  559   00028C 43                  deca
  560  560   00028D 277A                beq t3s5
  561  561   00028F 43                  deca
  562  562   000290 1827 0086           lbeq t3s6
  563  563   000294 43                  deca
  564  564   000295 1827 0094           lbeq t3s7
  565  565   000299 43                  deca
  566  566   00029A 1827 00A0           lbeq t3s8
  567  567   00029E 43                  deca
  568  568   00029F 1827 00AE           lbeq t3s9
  569  569   0002A3 43                  deca
  570  570   0002A4 1827 00BA           lbeq t3s10
  571  571   0002A8 43                  deca
  572  572   0002A9 1827 00C8           lbeq t3s11
  573  573   0002AD 3D                  rts
  574  574                              
  575  575                      t3s0:     ;init    
  576  576                              
  577  577   0002AE 16xx xx            jsr INITLCD       ;initialize LCD
  578  578   0002B1 180B 01xx          movb #$01, FIRSTCH
             0002B5 xx         
  579  579   0002B6 8600               ldaa #$00         ;set LCD position to 0
  580  580   0002B8 16xx xx            jsr SETADDR
  581  581   0002BB 1803 07D0          movw #$07D0, TICKS_ERR
             0002BF xxxx       
  582  582                             ;jsr CURSOR_ON     ;turn on cursor
  583  583   0002C1 180B 0Bxx          movb #$0B, t3state ; go to init state 
             0002C5 xx         
  584  584   0002C6 3D                 rts
  585  585                              
  586  586                      t3s1:
  587  587                      
  588  588                             ;hub
  589  589                                   
  590  590   0002C7 180B 01xx          movb #$01, FIRSTCH
             0002CB xx         
  591  591   0002CC F6xx xx            ldab MSG_NUM            
  592  592   0002CF 7Bxx xx            stab t3state
  593  593   0002D2 180B 01xx          movb #$01, MSG_NUM            
             0002D6 xx         
  594  594   0002D7 3D                 rts
  595  595                      
  596  596                      
  597  597                      t3s2:   ;backspace
  598  598                              ;bgnd
  599  599   0002D8 16xx xx             jsr backspace
  600  600   0002DB 180B 01xx           movb #$01, t3state

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
             0002DF xx         
  601  601   0002E0 3D                  rts
  602  602                      
  603  603                              
  604  604                      t3s3:   ;full time1 message     
  605  605                              ;bgnd
  606  606   0002E1 79xx xx             clr LNUM
  607  607   0002E4 8600                ldaa #$00
  608  608   0002E6 CExx xx             ldx #TIME1
  609  609   0002E9 F7xx xx             tst FIRSTCH
  610  610   0002EC 1826 0095           lbne char1
  611  611   0002F0 16xx xx             jsr PUTCHAR
  612  612   0002F3 3D                  rts
  613  613                              
  614  614                              
  615  615                      t3s4:   ;full time2 message
  616  616   0002F4 180B 01xx           movb #$01, LNUM
             0002F8 xx         
  617  617   0002F9 8640                ldaa #$40
  618  618   0002FB CExx xx             ldx #TIME2
  619  619   0002FE F7xx xx             tst FIRSTCH
  620  620   000301 1826 0080           lbne char1
  621  621   000305 16xx xx             jsr PUTCHAR
  622  622   000308 3D                  rts
  623  623                      
  624  624                      
  625  625                      t3s5:   ;no digit 1 message
  626  626   000309 79xx xx             clr LNUM
  627  627   00030C 8600                ldaa #$00
  628  628   00030E CExx xx             ldx #NODIG1
  629  629   000311 F7xx xx             tst FIRSTCH
  630  630   000314 266F                bne char1
  631  631   000316 16xx xx             jsr PUTCHAR
  632  632   000319 3D                  rts
  633  633                      
  634  634                      
  635  635                      t3s6:   ;no digit 2 message
  636  636   00031A 180B 01xx           movb #$01, LNUM
             00031E xx         
  637  637   00031F 8640                ldaa #$40
  638  638   000321 CExx xx             ldx #NODIG2
  639  639   000324 F7xx xx             tst FIRSTCH
  640  640   000327 265C                bne char1
  641  641   000329 16xx xx             jsr PUTCHAR
  642  642   00032C 3D                  rts
  643  643                              
  644  644                      
  645  645                      t3s7:   ;zero magnitude 1 message
  646  646   00032D 79xx xx             clr LNUM
  647  647   000330 8600                ldaa #$00
  648  648   000332 CExx xx             ldx #ZMAG1
  649  649   000335 F7xx xx             tst FIRSTCH
  650  650   000338 264B                bne char1
  651  651   00033A 16xx xx             jsr PUTCHAR
  652  652   00033D 3D                  rts
  653  653                      
  654  654                      t3s8:   ;zero magnitude 2 message
  655  655   00033E 180B 01xx           movb #$01, LNUM
             000342 xx         
  656  656   000343 8640                ldaa #$40
  657  657   000345 CExx xx             ldx #ZMAG2
  658  658   000348 F7xx xx             tst FIRSTCH
  659  659   00034B 2638                bne char1
  660  660   00034D 16xx xx             jsr PUTCHAR

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  661  661   000350 3D                  rts
  662  662                      
  663  663                      t3s9:   ;magnitude too large 1 message
  664  664   000351 79xx xx             clr LNUM
  665  665   000354 8600                ldaa #$00
  666  666   000356 CExx xx             ldx #MAGTL1
  667  667   000359 F7xx xx             tst FIRSTCH
  668  668   00035C 2627                bne char1
  669  669   00035E 16xx xx             jsr PUTCHAR
  670  670   000361 3D                  rts
  671  671                      
  672  672                      
  673  673                      t3s10:  ;magnitude too large 2 message
  674  674   000362 180B 01xx           movb #$01, LNUM
             000366 xx         
  675  675   000367 8640                ldaa #$40
  676  676   000369 CExx xx             ldx #MAGTL2
  677  677   00036C F7xx xx             tst FIRSTCH
  678  678   00036F 2614                bne char1
  679  679   000371 16xx xx             jsr PUTCHAR
  680  680   000374 3D                  rts
  681  681                      
  682  682                      t3s11:  ;display full screen (init message)
  683  683                      
  684  684   000375 CExx xx            ldx #INITMSG
  685  685   000378 F7xx xx            tst FIRSTCH
  686  686   00037B 2604               bne initmsg
  687  687   00037D 16xx xx            jsr ICHAR
  688  688   000380 3D                 rts
  689  689                             
  690  690                      initmsg: ;first char of init message
  691  691                             
  692  692   000381 16xx xx            jsr ICHAR1
  693  693   000384 3D                 rts
  694  694                             
  695  695                      char1:    ;first char of any message
  696  696                      
  697  697   000385 16xx xx            jsr PUTCHAR1
  698  698   000388 3D                 rts 
  699  699                              
  700  700                      exit3:
  701  701                      
  702  702   000389 3D                 rts
  703  703                             
  704  704                      ;------------------TASK 4--------------------------------------------------
  705  705                      ;pattern 1
  706  706                      
  707  707                      TASK_4: 
  708  708                              ;bgnd
  709  709   00038A B6xx xx             ldaa t4state ; get current t4state and branch accordingly
  710  710   00038D 272B                beq t4state0
  711  711   00038F 43                  deca
  712  712                              
  713  713   000390 F7xx xx             tst ON1
  714  714   000393 271B                beq turnofft4
  715  715                              
  716  716   000395 B6xx xx             ldaa t4state ; get current t4state and branch accordingly
  717  717   000398 2720                beq t4state0
  718  718   00039A 43                  deca
  719  719   00039B 272E                beq t4state1
  720  720   00039D 43                  deca
  721  721   00039E 273A                beq t4state2
  722  722   0003A0 43                  deca
  723  723   0003A1 2746                beq t4state3

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  724  724   0003A3 43                  deca
  725  725   0003A4 2752                beq t4state4
  726  726   0003A6 43                  deca
  727  727   0003A7 275E                beq t4state5
  728  728   0003A9 43                  deca
  729  729   0003AA 276A                beq t4state6
  730  730   0003AC 43                  deca
  731  731   0003AD 2776                beq t4state7
  732  732   0003AF 3D                  rts ; undefined state - do nothing but return
  733  733                              
  734  734                      turnofft4:
  735  735                              ;changes lights to off
  736  736   0003B0 1D02 5830           bclr PORTP, LED_MSK_1
  737  737   0003B4 180B 07xx           movb #$07, t4state
             0003B8 xx         
  738  738   0003B9 3D                  rts
  739  739                              
  740  740                              
  741  741                      t4state0: ; init TASK_1 (not G, not R)
  742  742   0003BA 79xx xx             clr ON1
  743  743   0003BD 1D02 5830           bclr PORTP, LED_MSK_1 ; ensure that LEDs are off when initialized
  744  744   0003C1 1C02 5A30           bset DDRP, LED_MSK_1 ; set LED_MSK_1 pins as PORTS outputs
  745  745   0003C5 180B 01xx           movb #$01, t4state ; set next state
             0003C9 xx         
  746  746   0003CA 3D                  rts
  747  747                              
  748  748                      t4state1: ; G, not R
  749  749   0003CB 1C02 5810           bset PORTP, G_LED_1 ; set state1 pattern on LEDs
  750  750   0003CF F7xx xx             tst DONE_1 ; check TASK_4 done flag
  751  751   0003D2 2705                beq exit_t4s1 ; if not done, return
  752  752   0003D4 180B 02xx           movb #$02, t4state ; otherwise if done, set next state
             0003D8 xx         
  753  753                      exit_t4s1:
  754  754   0003D9 3D                  rts
  755  755                              
  756  756                      t4state2: ; not G, not R
  757  757   0003DA 1D02 5810           bclr PORTP, G_LED_1 ; set state2 pattern on LEDs
  758  758   0003DE F7xx xx             tst DONE_1 ; check TASK_4 done flag
  759  759   0003E1 2705                beq exit_t4s2 ; if not done, return
  760  760   0003E3 180B 03xx           movb #$03, t4state ; otherwise if done, set next state
             0003E7 xx         
  761  761                      exit_t4s2:
  762  762   0003E8 3D                  rts
  763  763                              
  764  764                      t4state3: ; not G, R
  765  765   0003E9 1C02 5820           bset PORTP, R_LED_1 ; set state3 pattern on LEDs
  766  766   0003ED F7xx xx             tst DONE_1 ; check TASK_4 done flag
  767  767   0003F0 2705                beq exit_t4s3 ; if not done, return
  768  768   0003F2 180B 04xx           movb #$04, t4state ; otherwise if done, set next state
             0003F6 xx         
  769  769                      exit_t4s3:
  770  770   0003F7 3D                  rts
  771  771                              
  772  772                      t4state4 ; not G, not R
  773  773   0003F8 1D02 5820           bclr PORTP, R_LED_1 ; set state4 pattern on LEDs
  774  774   0003FC F7xx xx             tst DONE_1 ; check TASK_4 done flag
  775  775   0003FF 2705                beq exit_t4s4 ; if not done, return
  776  776   000401 180B 05xx           movb #$05, t4state ; otherwise if done, set next state
             000405 xx         
  777  777                      exit_t4s4:
  778  778   000406 3D                  rts
  779  779                              
  780  780                      t4state5: ; G, R
  781  781   000407 1C02 5830           bset PORTP, LED_MSK_1 ; set state5 pattern on LEDs

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  782  782   00040B F7xx xx             tst DONE_1 ; check TASK_4 done flag
  783  783   00040E 2705                beq exit_t4s5 ; if not done, return
  784  784   000410 180B 06xx           movb #$06, t4state ; otherwise if done, set next state
             000414 xx         
  785  785                      exit_t4s5:
  786  786   000415 3D                  rts
  787  787                              
  788  788                      t4state6: ; not G, not R
  789  789   000416 1D02 5830           bclr PORTP, LED_MSK_1 ; set state6 pattern on LEDs
  790  790   00041A F7xx xx             tst DONE_1 ; check TASK_4 done flag
  791  791   00041D 2705                beq exit_t4s6 ; if not done, return
  792  792   00041F 180B 01xx           movb #$01, t4state ; otherwise if done, set next state
             000423 xx         
  793  793                      exit_t4s6:
  794  794   000424 3D                  rts ; exit TASK_4
  795  795                              
  796  796                      t4state7: 
  797  797                              
  798  798   000425 1D02 5830           bclr PORTP, LED_MSK_1
  799  799   000429 180B 01xx           movb #$01, t4state
             00042D xx         
  800  800   00042E 3D                  rts         
  801  801                       
  802  802                      
  803  803                      
  804  804                      ;------------------TASK 5--------------------------------------------------
  805  805                      ;timing 1
  806  806                      
  807  807   00042F B6xx xx     TASK_5: ldaa t5state ; get current t5state and branch accordingly
  808  808   000432 2704                beq t5state0
  809  809   000434 43                  deca
  810  810   000435 2716                beq t5state1
  811  811   000437 3D                  rts ; undefined state - do nothing but return
  812  812                              
  813  813                      t5state0: ; initialization for TASK_5
  814  814   000438 1803 00FF           movw #$00FF, TICKS_1
             00043C xxxx       
  815  815   00043E 1804 xxxx           movw TICKS_1, COUNT_1 ; init COUNT_1
             000442 xxxx       
  816  816   000444 79xx xx             clr DONE_1 ; init DONE_1 to FALSE
  817  817   000447 180B 01xx           movb #$01, t5state ; set next state
             00044B xx         
  818  818   00044C 3D                  rts
  819  819                              
  820  820                      t5state1: ; Countdown_1
  821  821   00044D B6xx xx             ldaa DONE_1   ;load accumulator A with DONE_1 
  822  822   000450 8101                cmpa #$01     ;check if DONE_1 - 1 = 0 
  823  823   000452 2609                bne t5s1a ; skip reinitialization if DONE_1 is not = 1
  824  824                              
  825  825                              ;reinitialize if DONE_1 = 1 
  826  826                              
  827  827   000454 1804 xxxx           movw TICKS_1, COUNT_1 ; init COUNT_1
             000458 xxxx       
  828  828   00045A 79xx xx             clr DONE_1 ; init DONE_1 to FALSE
  829  829                              
  830  830                             ;after reinitialization, you still decrement
  831  831                              
  832  832   00045D 1873 xxxx   t5s1a:  decw COUNT_1    ;decrement COUNT_1
  833  833   000461 2605                bne exit_t5s2   ;if COUNT_1 is not equal to zero, exit 
  834  834   000463 180B 01xx           movb #$01, DONE_1     ;if COUNT_1 is zero, set DONE_1 to 1
             000467 xx         
  835  835                           
  836  836                              
  837  837                      exit_t5s2:

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  838  838   000468 3D                  rts ; exit TASK_5
  839  839                      
  840  840                      
  841  841                      
  842  842                      
  843  843                      
  844  844                      
  845  845                      ;------------------TASK 6--------------------------------------------------
  846  846                      ;pattern 2
  847  847                      
  848  848                      TASK_6: 
  849  849                              
  850  850                              
  851  851   000469 F7xx xx             tst ON2
  852  852   00046C 271B                beq turnofft6
  853  853                      
  854  854   00046E B6xx xx             ldaa t6state ; get current t1state and branch accordingly
  855  855   000471 2720                beq t6state0
  856  856   000473 43                  deca
  857  857   000474 272E                beq t6state1
  858  858   000476 43                  deca
  859  859   000477 273A                beq t6state2
  860  860   000479 43                  deca
  861  861   00047A 2746                beq t6state3
  862  862   00047C 43                  deca
  863  863   00047D 2752                beq t6state4
  864  864   00047F 43                  deca
  865  865   000480 275E                beq t6state5
  866  866   000482 43                  deca
  867  867   000483 276A                beq t6state6
  868  868   000485 43                  deca
  869  869   000486 2776                beq t6state7
  870  870   000488 3D                  rts ; undefined state - do nothing but return
  871  871                              
  872  872                      turnofft6:
  873  873                              ;changes lights to off
  874  874   000489 1D02 58C0           bclr PORTP, LED_MSK_2
  875  875   00048D 180B 07xx           movb #$07, t6state
             000491 xx         
  876  876   000492 3D                  rts
  877  877                                      
  878  878                              
  879  879                              
  880  880                      t6state0: ; init TASK_1 (not G, not R)
  881  881   000493 79xx xx             clr ON2
  882  882   000496 1D02 58C0           bclr PORTP, LED_MSK_2 ; ensure that LEDs are off when initialized
  883  883   00049A 1C02 5AC0           bset DDRP, LED_MSK_2 ; set LED_MSK_1 pins as PORTS outputs
  884  884   00049E 180B 01xx           movb #$01, t6state ; set next state
             0004A2 xx         
  885  885   0004A3 3D                  rts
  886  886                              
  887  887                      t6state1: ; G, not R
  888  888   0004A4 1C02 5840           bset PORTP, G_LED_2 ; set state1 pattern on LEDs
  889  889   0004A8 F7xx xx             tst DONE_2 ; check TASK_4 done flag
  890  890   0004AB 2705                beq exit_t6s1 ; if not done, return
  891  891   0004AD 180B 02xx           movb #$02, t6state ; otherwise if done, set next state
             0004B1 xx         
  892  892                      exit_t6s1:
  893  893   0004B2 3D                  rts
  894  894                              
  895  895                      t6state2: ; not G, not R
  896  896   0004B3 1D02 5840           bclr PORTP, G_LED_2 ; set state2 pattern on LEDs
  897  897   0004B7 F7xx xx             tst DONE_2 ; check TASK_1 done flag
  898  898   0004BA 2705                beq exit_t6s2 ; if not done, return

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  899  899   0004BC 180B 03xx           movb #$03, t6state ; otherwise if done, set next state
             0004C0 xx         
  900  900                      exit_t6s2:
  901  901   0004C1 3D                  rts
  902  902                              
  903  903                      t6state3: ; not G, R
  904  904   0004C2 1C02 5880           bset PORTP, R_LED_2 ; set state3 pattern on LEDs
  905  905   0004C6 F7xx xx             tst DONE_2 ; check TASK_2 done flag
  906  906   0004C9 2705                beq exit_t6s3 ; if not done, return
  907  907   0004CB 180B 04xx           movb #$04, t6state ; otherwise if done, set next state
             0004CF xx         
  908  908                      exit_t6s3:
  909  909   0004D0 3D                  rts
  910  910                              
  911  911                      t6state4 ; not G, not R
  912  912   0004D1 1D02 5880           bclr PORTP, R_LED_2 ; set state4 pattern on LEDs
  913  913   0004D5 F7xx xx             tst DONE_2 ; check TASK_2 done flag
  914  914   0004D8 2705                beq exit_t6s4 ; if not done, return
  915  915   0004DA 180B 05xx           movb #$05, t6state ; otherwise if done, set next state
             0004DE xx         
  916  916                      exit_t6s4:
  917  917   0004DF 3D                  rts
  918  918                              
  919  919                      t6state5: ; G, R
  920  920   0004E0 1C02 58C0           bset PORTP, LED_MSK_2 ; set state5 pattern on LEDs
  921  921   0004E4 F7xx xx             tst DONE_2 ; check TASK_2 done flag
  922  922   0004E7 2705                beq exit_t6s5 ; if not done, return
  923  923   0004E9 180B 06xx           movb #$06, t6state ; otherwise if done, set next state
             0004ED xx         
  924  924                      exit_t6s5:
  925  925   0004EE 3D                  rts
  926  926                              
  927  927                      t6state6: ; not G, not R
  928  928   0004EF 1D02 58C0           bclr PORTP, LED_MSK_2 ; set state6 pattern on LEDs
  929  929   0004F3 F7xx xx             tst DONE_2 ; check TASK_2 done flag
  930  930   0004F6 2705                beq exit_t6s6 ; if not done, return
  931  931   0004F8 180B 01xx           movb #$01, t6state ; otherwise if done, set next state
             0004FC xx         
  932  932                      exit_t6s6:
  933  933   0004FD 3D                  rts ; exit TASK_4
  934  934                              
  935  935                      t6state7: 
  936  936                              
  937  937   0004FE 1D02 58C0           bclr PORTP, LED_MSK_2
  938  938   000502 180B 01xx           movb #$01, t6state
             000506 xx         
  939  939   000507 3D                  rts 
  940  940                              
  941  941                      
  942  942                      
  943  943                      
  944  944                      
  945  945                      
  946  946                      
  947  947                      ;------------------TASK 7--------------------------------------------------
  948  948                      ;timing 2
  949  949                      
  950  950   000508 B6xx xx     TASK_7: ldaa t7state ; get current t2state and branch accordingly
  951  951   00050B 2704                beq t7state0
  952  952   00050D 43                  deca
  953  953   00050E 2716                beq t7state1
  954  954   000510 3D                  rts ; undefined state - do nothing but return
  955  955                              
  956  956                      t7state0: ; initialization for TASK_7

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
  957  957   000511 1803 00FF           movw #$00FF, TICKS_2
             000515 xxxx       
  958  958   000517 1804 xxxx           movw TICKS_2, COUNT_2 ; init COUNT_2
             00051B xxxx       
  959  959   00051D 79xx xx             clr DONE_2 ; init DONE_2 to FALSE
  960  960   000520 180B 01xx           movb #$01, t7state ; set next state
             000524 xx         
  961  961   000525 3D                  rts
  962  962                              
  963  963                      t7state1: ; Countdown_1
  964  964   000526 B6xx xx             ldaa DONE_2   ;load accumulator A with DONE_2 
  965  965   000529 8101                cmpa #$01     ;check if DONE_2 - 1 = 0 
  966  966   00052B 2609                bne t7s1a ; skip reinitialization if DONE_2 is not = 1
  967  967                              
  968  968                              ;reinitialize if DONE_2 = 1 
  969  969                              
  970  970   00052D 1804 xxxx           movw TICKS_2, COUNT_2 ; init COUNT_2
             000531 xxxx       
  971  971   000533 79xx xx             clr DONE_2 ; init DONE_2 to FALSE
  972  972                              
  973  973                             ;after reinitialization, you still decrement
  974  974                              
  975  975   000536 1873 xxxx   t7s1a:  decw COUNT_2    ;decrement COUNT_2
  976  976   00053A 2605                bne exit_t7s2   ;if COUNT_2 is not equal to zero, exit 
  977  977                              ;bgnd
  978  978   00053C 180B 01xx           movb #$01, DONE_2     ;if COUNT_1 is zero, set DONE_2 to 1
             000540 xx         
  979  979                           
  980  980                              
  981  981                      exit_t7s2:
  982  982   000541 3D                  rts ; exit TASK_7
  983  983                      
  984  984                      
  985  985                      
  986  986                      
  987  987                      
  988  988                      
  989  989                      ;------------------TASK 8--------------------------------------------------
  990  990                                ;delay
  991  991                                
  992  992   000542 B6xx xx     TASK_8: ldaa t8state ; get current t3state and branch accordingly
  993  993   000545 2704                beq t8state0
  994  994   000547 43                  deca
  995  995   000548 2707                beq t8state1
  996  996   00054A 3D                  rts ; undefined state - do nothing but return
  997  997                      
  998  998                      t8state0: ; initialization for TASK_8
  999  999                              ; no initialization required
 1000 1000   00054B 180B 01xx           movb #$01, t8state ; set next state
             00054F xx         
 1001 1001   000550 3D                  rts
 1002 1002                      
 1003 1003                      t8state1:
 1004 1004   000551 16xx xx             jsr DELAY_1ms
 1005 1005   000554 3D                  rts ; exit TASK_8
 1006 1006                              
 1007 1007                              
 1008 1008                        
 1009 1009                      ;/------------------------------------------------------------------------------------\
 1010 1010                      ;| Subroutines                                                                        |
 1011 1011                      ;\------------------------------------------------------------------------------------/
 1012 1012                      ; General purpose subroutines go here
 1013 1013                      
 1014 1014                        

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1015 1015                       ;---------------------------------------------------------------------------------------     
 1016 1016                               
 1017 1017                        backspace:
 1018 1018   000555 F7xx xx            tst COUNT
 1019 1019   000558 2718               beq bkspexit
 1020 1020   00055A 16xx xx            jsr GETADDR                   ;get current position of LCR
 1021 1021   00055D 43                 deca                          ;decrement one
 1022 1022   00055E 16xx xx            jsr SETADDR                   ;set address to new position
 1023 1023                             ;bgnd
 1024 1024   000561 CExx xx            ldx #BACKSPACE                ;
 1025 1025   000564 16xx xx            jsr OUTSTRING                 ;output a blank character
 1026 1026   000567 16xx xx            jsr GETADDR                   ;get current position of LCR
 1027 1027   00056A 43                 deca                          ;decrement one
 1028 1028   00056B 16xx xx            jsr SETADDR                   ;set address to new position
 1029 1029                             ;bgnd
 1030 1030   00056E 73xx xx            dec COUNT                     ;reset the value of count
 1031 1031   000571 3D                 rts
 1032 1032                        
 1033 1033                      bkspexit:
 1034 1034                      
 1035 1035   000572 3D                 rts
 1036 1036                             
 1037 1037                         
 1038 1038                        
 1039 1039                        ;------CONVERSIONS---------------------------------------------------------------------------;
 1040 1040                      
 1041 1041                      conversion:
 1042 1042                      		
 1043 1043                      		;init here
 1044 1044   000573 1879 xxxx   		clrw RESULT
 1045 1045   000577 79xx xx     		clr TMP
 1046 1046   00057A 79xx xx     		clr ERR
 1047 1047   00057D CExx xx     		ldx #BUFFER
 1048 1048   000580 35          		pshy			;pushes registers to stack so that they remain unchanged by the subroutine
 1049 1049   000581 37          		pshb
 1050 1050   000582 39          		pshc
 1051 1051                      		
 1052 1052                      		
 1053 1053                      convloop:
 1054 1054                      
 1055 1055                      		;loop goes here
 1056 1056   000583 B6xx xx     		ldaa COUNT		;check if COUNT has finished for loop
 1057 1057   000586 272D        		beq loopfin		;branch to exit if COUNT is done
 1058 1058                      		
 1059 1059                      		
 1060 1060   000588 FDxx xx     		ldy RESULT		;load current value of RESULT into register y for use
 1061 1061   00058B CC00 0A     		ldd #$000A		;load hex 10 into accumulator for use
 1062 1062   00058E 13          		emul			    ;multiply register y and acc d
 1063 1063   00058F 18D7        		tsty          ;sets flag for y
 1064 1064   000591 261B        		bne ERR1      ;checks if the multiplication overflowed to y
 1065 1065   000593 7Cxx xx     		std RESULT		;keep the bottom 2 bytes of the emul since we are never dealing with 4 bit nums
 1066 1066                      		
 1067 1067                      		
 1068 1068                      		
 1069 1069   000596 B6xx xx     		ldaa TMP		;TMP is used for index addressing
 1070 1070   000599 E6E4        		ldab a,x		;reference the correct digit in the BUFFER using TMP
 1071 1071   00059B C030        		subb #$30		;subtract $30 to get the decimal value of the ascii code
 1072 1072                      		
 1073 1073                      		
 1074 1074   00059D 87          		clra
 1075 1075   00059E F3xx xx     		addd RESULT		;add RESULT and acc d 
 1076 1076   0005A1 250B        		bcs ERR1      ;branch if the addition triggers an overflow, causing error 1
 1077 1077   0005A3 7Cxx xx     		std RESULT		;store addition in RESULT
 1078 1078   0005A6 72xx xx     		inc TMP		  	;inc TMP so that BUFFER digits are correctly referenced

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1079 1079   0005A9 73xx xx     		dec COUNT		  ;dec COUNT to track how long the loop has operated for
 1080 1080   0005AC 20D5        		bra convloop
 1081 1081                      			
 1082 1082                      
 1083 1083                      ERR1:		
 1084 1084                      
 1085 1085   0005AE 180B 01xx   		movb #$01, ERR ;set ERR for MAGNITUDE TOO LARGE
             0005B2 xx         
 1086 1086   0005B3 200A        		bra cnvexit
 1087 1087                      	
 1088 1088                      loopfin:
 1089 1089                      		
 1090 1090   0005B5 FExx xx     		ldx RESULT     ;happens at the end of the loop to check for error 2
 1091 1091   0005B8 2605        		bne cnvexit	
 1092 1092                      		
 1093 1093                      ERR2:
 1094 1094                      
 1095 1095   0005BA 180B 02xx   		movb #$02, ERR  ;set ERR for ZERO MAGNITUDE INAPPROPRIATE
             0005BE xx         
 1096 1096                      
 1097 1097                      cnvexit:
 1098 1098                      
 1099 1099   0005BF B6xx xx     		ldaa ERR		;load ERRor into accumulator a
 1100 1100   0005C2 38          		pulc        ;pulls registers from stack to restore them to pre-subroutine states
 1101 1101   0005C3 33          		pulb
 1102 1102   0005C4 31          		puly
 1103 1103   0005C5 3D          		rts         ;return
 1104 1104                              
 1105 1105                      
 1106 1106                      ;-------------------Cooperative Fixed Messaging-------------------------------------------;        
 1107 1107                      
 1108 1108                      PUTCHAR1:    
 1109 1109   0005C6 7Exx xx               stx DPTR
 1110 1110   0005C9 16xx xx               jsr SETADDR
 1111 1111   0005CC 79xx xx               clr FIRSTCH
 1112 1112   0005CF 1804 xxxx             movw TICKS_ERR, COUNT_ERR
             0005D3 xxxx       
 1113 1113                                
 1114 1114                      PUTCHAR:          
 1115 1115   0005D5 FExx xx               ldx DPTR
 1116 1116   0005D8 E600                  ldab 0,x
 1117 1117   0005DA 2720                  beq ERR_DELAY
 1118 1118   0005DC 1872 xxxx             incw DPTR
 1119 1119   0005E0 16xx xx               jsr OUTCHAR
 1120 1120   0005E3 3D                    rts
 1121 1121                      
 1122 1122                      
 1123 1123                      mess_exit:
 1124 1124                                  ;bgnd 
 1125 1125   0005E4 180B 01xx               movb #$01, t3state
             0005E8 xx         
 1126 1126   0005E9 180B 01xx               movb #$01, MSG_NUM
             0005ED xx         
 1127 1127   0005EE 16xx xx                 jsr clrcurs
 1128 1128                                  ;bgnd
 1129 1129   0005F1 F7xx xx                 tst F1_FLG
 1130 1130   0005F4 2635                    bne F1addressset
 1131 1131   0005F6 F7xx xx                 tst F2_FLG
 1132 1132   0005F9 2636                    bne F2addressset
 1133 1133   0005FB 3D                      rts
 1134 1134                                  
 1135 1135                      ERR_DELAY:
 1136 1136                                  ;bgnd
 1137 1137   0005FC 16xx xx                 jsr clrcurs

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1138 1138   0005FF B6xx xx                 ldaa t3state
 1139 1139   000602 8104                    cmpa #$04
 1140 1140   000604 2FDE                    ble mess_exit
 1141 1141   000606 F7xx xx                 tst COUNT_ERR
 1142 1142   000609 2705                    beq err_exit
 1143 1143   00060B 1873 xxxx               decw COUNT_ERR
 1144 1144   00060F 3D                      rts
 1145 1145                                  
 1146 1146                      err_exit:
 1147 1147                                  ;bgnd
 1148 1148                                  
 1149 1149   000610 F7xx xx                 tst LNUM
 1150 1150   000613 260B                    bne F2errexit
 1151 1151   000615 180B 03xx               movb #$03, MSG_NUM
             000619 xx         
 1152 1152   00061A 180B 01xx               movb #$01, t3state
             00061E xx         
 1153 1153   00061F 3D                      rts
 1154 1154                                  
 1155 1155   000620 180B 04xx   F2errexit:  movb #$04, MSG_NUM
             000624 xx         
 1156 1156   000625 180B 01xx               movb #$01, t3state
             000629 xx         
 1157 1157   00062A 3D                      rts
 1158 1158                      
 1159 1159                      
 1160 1160                                  
 1161 1161                      F1addressset:
 1162 1162                      
 1163 1163   00062B 8608                  ldaa #$08
 1164 1164   00062D 16xx xx               jsr SETADDR
 1165 1165   000630 3D                    rts
 1166 1166                                
 1167 1167                      F2addressset:
 1168 1168                      
 1169 1169   000631 8648                  ldaa #$48
 1170 1170   000633 16xx xx               jsr SETADDR 
 1171 1171   000636 3D                    rts 
 1172 1172                      
 1173 1173                      clrcurs:
 1174 1174   000637 36                    psha
 1175 1175   000638 8630                  ldaa #$30
 1176 1176   00063A 16xx xx               jsr SETADDR
 1177 1177   00063D 32                    pula
 1178 1178   00063E 3D                    rts
 1179 1179                      ;-------------------Cooperative Fixed init message-----------------------
 1180 1180                      
 1181 1181                      ICHAR1: 
 1182 1182   00063F 7Exx xx               stx DPTR
 1183 1183   000642 16xx xx               jsr SETADDR
 1184 1184   000645 79xx xx               clr FIRSTCH
 1185 1185                                
 1186 1186                      ICHAR:        
 1187 1187   000648 FExx xx               ldx DPTR
 1188 1188   00064B E600                  ldab 0,x
 1189 1189   00064D 2795                  beq mess_exit
 1190 1190   00064F 1872 xxxx             incw DPTR
 1191 1191   000653 16xx xx               jsr OUTCHAR
 1192 1192   000656 16xx xx               jsr GETADDR
 1193 1193   000659 8128                  cmpa #$28
 1194 1194   00065B 2701                  beq changeline
 1195 1195   00065D 3D                    rts
 1196 1196                      
 1197 1197                      changeline: 

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1198 1198                      
 1199 1199   00065E 8640                  ldaa #$40
 1200 1200   000660 16xx xx               jsr SETADDR
 1201 1201   000663 3D                    rts
 1202 1202                      
 1203 1203                      
 1204 1204                      ;----------------------DElay----------------------------
 1205 1205                      
 1206 1206                      DELAY_1ms:
 1207 1207   000664 CD05 84             ldy #$0584
 1208 1208                              INNER: ; inside loop
 1209 1209   000667 8D00 00             cpy #0
 1210 1210   00066A 2703                beq EXIT
 1211 1211   00066C 03                  dey
 1212 1212   00066D 20F8                bra INNER
 1213 1213                              EXIT:
 1214 1214   00066F 3D                  rts ; exit DELAY_1ms
 1215 1215                              
 1216 1216                              
 1217 1217                              
 1218 1218                      ;-----------------clearbuffer----------------------   
 1219 1219                      
 1220 1220                      clearbuffer:
 1221 1221                      
 1222 1222   000670 CExx xx           ldx #BUFFER
 1223 1223   000673 8600              ldaa #$00
 1224 1224   000675 69E4              clr a, x
 1225 1225   000677 42                inca
 1226 1226   000678 69E4              clr a, x
 1227 1227   00067A 42                inca
 1228 1228   00067B 69E4              clr a, x
 1229 1229   00067D 42                inca
 1230 1230   00067E 69E4              clr a, x
 1231 1231   000680 42                inca
 1232 1232   000681 69E4              clr a, x
 1233 1233   000683 3D                rts
 1234 1234                      
 1235 1235                      
 1236 1236                      ;/------------------------------------------------------------------------------------\
 1237 1237                      ;| ASCII Messages and Constant Data                                                   |
 1238 1238                      ;\------------------------------------------------------------------------------------/
 1239 1239                      ; Any constants can be defined here
 1240 1240                      
 1241 1241   000684 5449 4D45    INITMSG: DC.B 'TIME1 =       <F1> to update LED1 periodTIME2 =       <F2> to update LED1 period', $00
             000688 3120 3D20  
             00068C 2020 2020  
             000690 2020 3C46  
             000694 313E 2074  
             000698 6F20 7570  
             00069C 6461 7465  
             0006A0 204C 4544  
             0006A4 3120 7065  
             0006A8 7269 6F64  
             0006AC 5449 4D45  
             0006B0 3220 3D20  
             0006B4 2020 2020  
             0006B8 2020 3C46  
             0006BC 323E 2074  
             0006C0 6F20 7570  
             0006C4 6461 7465  
             0006C8 204C 4544  
             0006CC 3120 7065  
             0006D0 7269 6F64  
             0006D4 00         

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
 1242 1242   0006D5 5449 4D45    TIME1:  DC.B 'TIME1 =       <F1> to update LED1 period', $00
             0006D9 3120 3D20  
             0006DD 2020 2020  
             0006E1 2020 3C46  
             0006E5 313E 2074  
             0006E9 6F20 7570  
             0006ED 6461 7465  
             0006F1 204C 4544  
             0006F5 3120 7065  
             0006F9 7269 6F64  
             0006FD 00         
 1243 1243   0006FE 5449 4D45    TIME2:  DC.B 'TIME2 =       <F2> to update LED1 period', $00
             000702 3220 3D20  
             000706 2020 2020  
             00070A 2020 3C46  
             00070E 323E 2074  
             000712 6F20 7570  
             000716 6461 7465  
             00071A 204C 4544  
             00071E 3120 7065  
             000722 7269 6F64  
             000726 00         
 1244 1244   000727 5449 4D45    NODIG1: DC.B 'TIME1 = NO DIGITS ENTERED               ', $00
             00072B 3120 3D20  
             00072F 4E4F 2044  
             000733 4947 4954  
             000737 5320 454E  
             00073B 5445 5245  
             00073F 4420 2020  
             000743 2020 2020  
             000747 2020 2020  
             00074B 2020 2020  
             00074F 00         
 1245 1245   000750 5449 4D45    NODIG2: DC.B 'TIME2 = NO DIGITS ENTERED               ', $00
             000754 3220 3D20  
             000758 4E4F 2044  
             00075C 4947 4954  
             000760 5320 454E  
             000764 5445 5245  
             000768 4420 2020  
             00076C 2020 2020  
             000770 2020 2020  
             000774 2020 2020  
             000778 00         
 1246 1246   000779 5449 4D45    ZMAG1:  DC.B 'TIME1 = ZERO MAGNITUDE INAPPROPRIATE    ', $00
             00077D 3120 3D20  
             000781 5A45 524F  
             000785 204D 4147  
             000789 4E49 5455  
             00078D 4445 2049  
             000791 4E41 5050  
             000795 524F 5052  
             000799 4941 5445  
             00079D 2020 2020  
             0007A1 00         
 1247 1247   0007A2 5449 4D45    ZMAG2:  DC.B 'TIME2 = ZERO MAGNITUDE INAPPROPRIATE    ', $00
             0007A6 3220 3D20  
             0007AA 5A45 524F  
             0007AE 204D 4147  
             0007B2 4E49 5455  
             0007B6 4445 2049  
             0007BA 4E41 5050  
             0007BE 524F 5052  
             0007C2 4941 5445  

Freescale HC12-Assembler 
(c) Copyright Freescale 1987-2010

 Abs. Rel.   Loc    Obj. code   Source line
 ---- ----   ------ ---------   -----------
             0007C6 2020 2020  
             0007CA 00         
 1248 1248   0007CB 5449 4D45    MAGTL1: DC.B 'TIME1 = MAGNITUDE TOO LARGE             ', $00
             0007CF 3120 3D20  
             0007D3 4D41 474E  
             0007D7 4954 5544  
             0007DB 4520 544F  
             0007DF 4F20 4C41  
             0007E3 5247 4520  
             0007E7 2020 2020  
             0007EB 2020 2020  
             0007EF 2020 2020  
             0007F3 00         
 1249 1249   0007F4 5449 4D45    MAGTL2: DC.B 'TIME2 = MAGNITUDE TOO LARGE             ', $00
             0007F8 3220 3D20  
             0007FC 4D41 474E  
             000800 4954 5544  
             000804 4520 544F  
             000808 4F20 4C41  
             00080C 5247 4520  
             000810 2020 2020  
             000814 2020 2020  
             000818 2020 2020  
             00081C 00         
 1250 1250   00081D 2000         BACKSPACE: DC.B ' ' , $00 
 1251 1251                       
 1252 1252                       
 1253 1253                      ;/------------------------------------------------------------------------------------\
 1254 1254                      ;| Vectors                                                                            |
 1255 1255                      ;\------------------------------------------------------------------------------------/
 1256 1256                      ; Add interrupt and reset vectors here
 1257 1257                      
 1258 1258                              ORG   $FFFE                    ; reset vector address
 1259 1259  a00FFFE xxxx                DC.W  Entry
 1260 1260                      
