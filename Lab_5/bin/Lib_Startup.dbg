;***************************************************************************************************           
;* Lib_Startup.asm for Library Files ME305LIBV2.2.lib                                              * 
;***************************************************************************************************
;* Summary:                                                                                        *
;*  - Enables PLL and configures it for 20MHz clock                                                *
;*  - Enables PWM and configures the frequency for motor driving                                   *
;*  - Enables SPI and configures channel 0 for DAC communication                                   *
;*                                                                                                 * 
;*************************************************************************************************** 
;* Revision History:                                                                               *
;*  CTR 10/23/14                                                                                   *
;*   - Wrote Initial Code for 8 bit PWM                                                            *
;*  CTR 10/24/14                                                                                   *
;*   - Added 16 bit functionality to PWM and configured output                                     *
;*     for ~20KHz                                                                                  *
;*  CTR 10/25/14                                                                                   *
;*   - Added SPI initialization code                                                               *
;*   - Added DAC initialization code                                                               *
;*   - Wrote subroutine for communication with the DAC                                             *
;*  CTR 10/30/14                                                                                   *
;*   - Added Encoder Counter initialization code                                                   *
;*   - Wrote subroutine for communication with the enocder                                         *
;*   - Moved all startup code to individual subroutines                                            *
;*  CTR 11/03/14                                                                                   *
;*   - Added motor driver voltage update subroutine                                                *
;*   - Reorganized code to be more readable                                                        *
;*   - Added Startup code for ATD                                                                  *
;*   - Added current sense subroutine for motor driver                                             *
;*  CTR 11/05/14                                                                                   *
;*   - Changed ATD code for current sensing to the average of 8 readings                           *
;*   - Improved commenting format                                                                  *
;*  CTR 11/06/14                                                                                   *
;*   - Made all pins and ports equates in the top of the code to simplify things                   * 
;*   - Moved pins from port T to port A                                                            *
;*  CTR 11/07/14                                                                                   *
;*   - Moved data available pin to Port H for key wakeup                                           *
;*  CTR 11/08/14                                                                                   *
;*   - Split code up into seperate files linked together                                           *
;*   - Added key wakeup interrupt service routine to decode the keypad                             *  
;*************************************************************************************************** 


;***************************************************************************************************                                                                                              
;* Microcontroller Startup Subroutines                                                             *
;*************************************************************************************************** 
;*  The following are subroutines to configure the microcontoller internal hardware                *                                                                                                 
;*  - Configure PLL                                                                                *  
;*  - Configure SPI0                                                                               *  
;*  - Configure ATD0                                                                               *  
;*************************************************************************************************** 

            INCLUDE 'derivative.inc'     
            XDEF  _Startup, Entry, STARTUP_PWM, STARTUP_ATD1
            
            XREF  __SEG_END_SSTACK 
            XREF  main
            XREF  STARTUP_ENCODER, DISABLE_ENCODER
            XREF  STARTUP_MOTOR
            XREF  INITKEY   
            XREF  INITLCD
            XREF  DELAY_MILLI
            XREF  DELAY_MICRO

; DAC Equates    
DACPort     EQU   PTH                                   ; Port which DAC is on
DACDDR      EQU   DDRH                                    ; Port which DAC is on
mDACSS      EQU   mPTH_PTH1                              ; Pin for DAC slave select         
; Encoder Counter Equates
ENCPort     EQU   PTH                                   ; Port which Encoder Counter is on
ENCDDR      EQU   DDRH                                    ; Port which Encoder Counter is on
mENCSS      EQU   mPTH_PTH0                              ; Pin for Encoder counter slave select



;/-------------------------------------------------------------------------------------------------\                                                                                              
;| Startup Code                                                                                    |
;|-------------------------------------------------------------------------------------------------|
;| - Uses PLL to set PLLCLK to 20MHz, which corresponds to a 10MHz ECLK                            | 
;| - Enables SPI on channel 0 for communication with the DAC and Encoder Counter                   |
;| - Enables PWM on channel 0 for the motor driver                                                 |
;| - Configures Encoder counter to be read in 2 byte continuous counting with x4 quadrature        | 
;| - Configures the Analog to digital hardware to read the current draw on the motor               | 
;| - Enables the motor so the main program code can change the speed                               | 
;\-------------------------------------------------------------------------------------------------/
;
Lib_Startup:SECTION
_Startup:
Entry:   
            lds   #__SEG_END_SSTACK                     ; initialize the stack pointer    
            jsr   STARTUP_PLL                           ; Initialize Phase Locked Loop    
            jsr   STARTUP_IO                            ; Initialize all I/O pins (set pull devices)
            jsr   STARTUP_SPI0                          ; Initialize SPI channel 0            
            jsr   DISABLE_ENCODER                       ; Ensures the encoder counter is not counting
            ;jsr   STARTUP_MOTOR                         ; Initialize I/O pins for motor control
            ;jsr   STARTUP_PWM                           ; Initialize PWM channel 0
            ;jsr   STARTUP_ENCODER                       ; Initialize Encoder
            ;jsr   STARTUP_ATD0                          ; Initialize Analog to Digital Converter
            ;jsr   STARTUP_ATD1                          ; Initialize Analog to Digital Converter
            ;jsr   INITKEY                               ; Enable keypad intterupts  
            ;jsr   INITLCD
            
            lbra   main
            
            
;
;/-------------------------------------------------------------------------------------------------\                                                                                              
;| Use PLL to increase ECLK to 10MHz                                                               |
;|-------------------------------------------------------------------------------------------------|
;| This subroutine uses the Phase Locked Loop hardware to increase the execution clock on the MCU. |
;| The primary need for this is to increase the frequency and resolution of the PWM signal meant   | 
;| for controlling the motor drivers.                                                              |
;|                                                                                                 |
;| Phase Locked Loop Frequency Calculation                                                         |
;|  PLLCLK Goal is 20 MHz (2xECLK), compute SYNR and REFDV to set speed accordingly                |
;|  PLLCLK = 2 X OSCCLK X (SYNR+1)/(REFDV+1)                                                       |
;|  PLLCLK = 2 X 16MHz X (4 + 1)/(7 + 1)                                                           |
;|  PLLCLK = 32MHz X (5/8)                                                                         |
;|  PLLCLK = 20MHz                                                                                 |
;\-------------------------------------------------------------------------------------------------/
;

STARTUP_PLL:         
            bclr  CLKSEL,   #mCLKSEL_PLLSEL           ; Disengage PLL
            bset  PLLCTL,   #mPLLCTL_PLLON            ; Turn on PLL
            movb  #$04,     SYNR                      ; Set Synthesizer Register
            movb  #$07,     REFDV                     ; Clear reference divider register
            nop                                       ; Wait one clock cycle
            nop                                       ; Wait second clock cycle
            brclr CRGFLG,   #mCRGFLG_LOCK,*           ; wait until PLL locks into the target frequency
            bset  CLKSEL,   #mCLKSEL_PLLSEL           ; Re-engage PLL
            bset  PLLCTL,   #mPLLCTL_AUTO             ; set automatic bandwidth control
            bclr  ECLKCTL,  #mECLKCTL_NECLK           ; Makes the ECLK available out of DEBUG mode
            rts 
;
;
;/-------------------------------------------------------------------------------------------------\                                                                                              
;| Intiate SPI hardware and configure for Master Mode                                              |
;|-------------------------------------------------------------------------------------------------|
;| This subroutine enables the SPI hardware and configures it to operate at 2MHz in master mode.   |  
;| The configuration is compatible with both the MCP4922 DAC and LS7366R Encoder Counter acting as |  
;| slaves.                                                                                         |  
;\-------------------------------------------------------------------------------------------------/ 
;
STARTUP_SPI0:
            bset  SPI0CR1,  #mSPI0CR1_SPE             ; Enable SPI system (dedicate pins PS4-PS7)
            bclr  SPI0CR1,  #mSPI0CR1_CPOL            ; Enable clock idle low
            bclr  SPI0CR1,  #mSPI0CR1_CPHA            ; Enable valid data on first clock edge
            bset  SPI0CR1,  #mSPI0CR1_MSTR            ; Set SPI to master mode
            bclr  SPI0CR1,  #mSPI0CR1_LSBFE           ; Configure LSBFE for MSB first
            bclr  SPI0CR2,  #mSPI0CR2_SPC0            ; Disable bidirectional configuration            
            movb  #%01010000,SPI0BR                   ; Set Baud Rate to ~2MHz                                                                                                                           
            bset  DACDDR,   #mDACSS                   ; Enable Port T pin 7 as output For CS for DAC                            
            bset  ENCDDR,   #mENCSS                   ; Enable Port T pin 7 as output For CS for Encoder  
            bset  DACPort,  #mDACSS;                  ; Set Port T pin 7 high
            bset  ENCPort,  #mENCSS;                  ; Set Port T pin 6 high
            rts                                    
;
;
;/-------------------------------------------------------------------------------------------------\                                                                                              
;| Intiate Analog to Digital Converter                                                             |
;|-------------------------------------------------------------------------------------------------|
;| This code initializes the ATD converter on channel 0 and configures it for an 8 conversion      |  
;| sequence.                                                                                       |  
;|                                                                                                 |  
;\-------------------------------------------------------------------------------------------------/ 
;
STARTUP_ATD0:
            bset  ATD0CTL2, #mATD0CTL2_ADPU           ; ADPU=1 (Normal ATD operation)  
            bset  ATD0CTL2, #mATD0CTL2_AFFC           ; AFFC=1 (Any access will clear associated register)
            bset  ATD0CTL2, #mATD0CTL2_AWAI           ; AWAI=1 (Powers down during wait mode)
            
            ldx   #5                                  ;set delay time
            jsr   DELAY_MILLI                         ;sub for 5ms delay
            
            movb  #%00000010,ATD0CTL3                 ; Set config bits in ATD0 control register 3
;                   |\__/|\/
;                   |  | | | 
;                   |  | |  \__________________________ FRZ1:FRZ0=10 (finish current conversion then freeze in background mode
;                   |  |  \____________________________ FIFO=0 (Conversion results are placed in consecutive result registers)
;                   |   \______________________________ S8C:S4C:S2C:S1C=0000 (8 Conversion sequence limit)
;                    \_________________________________ Don't Care
            movb  #%00000101,ATD0CTL4                 ; Set config bits in ATD0 control register 4
;                   |\/\___/
;                   | |  |  
;                   | |   \____________________________ PRS4:PRS3:PRS2:PRS1:PRS0=00101 (divide by 12)
;                   |  \_______________________________ SMP1:SMP0=00 (2 A/D conversion clock periods)
;                    \_________________________________ SRES8=0 (10-bit operation)            
            rts 
; 
STARTUP_ATD1:
            bset  ATD1CTL2, #mATD1CTL2_ADPU           ; ADPU=1 (Normal ATD operation)  
            bset  ATD1CTL2, #mATD1CTL2_AFFC           ; AFFC=1 (Any access will clear associated register)
            bset  ATD1CTL2, #mATD1CTL2_AWAI           ; AWAI=1 (Powers down during wait mode)
            
            ldx   #4                                  ;set delay time
            jsr   DELAY_MICRO                         ;sub for 20us delay
            
            movb  #%00000010,ATD1CTL3                 ; Set config bits in ATD0 control register 3
;                   |\__/|\/
;                   |  | | | 
;                   |  | |  \__________________________ FRZ1:FRZ0=10 (finish current conversion then freeze in background mode
;                   |  |  \____________________________ FIFO=0 (Conversion results are placed in consecutive result registers)
;                   |   \______________________________ S8C:S4C:S2C:S1C=0000 (8 Conversion sequence limit)
;                    \_________________________________ Don't Care
            movb  #%00000101,ATD1CTL4                 ; Set config bits in ATD0 control register 4
;                   |\/\___/
;                   | |  |  
;                   | |   \____________________________ PRS4:PRS3:PRS2:PRS1:PRS0=00101 (divide by 12)
;                   |  \_______________________________ SMP1:SMP0=00 (2 A/D conversion clock periods)
;                    \_________________________________ SRES8=0 (10-bit operation)            
            rts 
;  
;/-------------------------------------------------------------------------------------------------\                                                                                              
;| Intiate Pulse Width Modulation Channel 01                                                       |
;|-------------------------------------------------------------------------------------------------|
;| Enable PWM at ~20KHz on channels 0 and 1 concatenated                                           |  
;| PWM in the ~20KHz range which is best for motor drivers                                         |  
;\-------------------------------------------------------------------------------------------------/                                                           
;
STARTUP_PWM:
            bclr  PWMPRCLK, #%00000111                ; Set Clock A Prescale value to 1
            bset  PWMCTL,   #mPWMCTL_CON01            ; Concatenate Channels 0 and 1
            bclr  PWMCLK,   #mPWMCLK_PCLK1            ; Set Channel 1 PWM Clock to A     
            bset  PWMPOL,   #mPWMPOL_PPOL1            ; Set Channel 1 PWM polarity to high
            bclr  PWMCAE,   #mPWMCAE_CAE1             ; Left Align Channel 1
            clrw  PWMDTY0                             ; Prevents PWM on startup   
            bset  PWME,     #mPWME_PWME1              ; Enable PWM Channel 1  
            rts
;  
;/-------------------------------------------------------------------------------------------------\                                                                                              
;| PULL DOWN ALL I/O PORTS                                                                         |
;|-------------------------------------------------------------------------------------------------|
;| Pulls down the following ports:                                                                 |  
;| - PORTA                                                                                         |  
;| - PORTB                                                                                         |  
;| - PORTC                                                                                         |  
;| - PORTD                                                                                         |  
;| - PORTE                                                                                         |  
;| - PORTH                                                                                         |  
;| - PORTJ                                                                                         |  
;| - PORK                                                                                          |  
;| - PORTM                                                                                         |  
;| - PORTP                                                                                         |  
;| - PORTS                                                                                         |  
;| - PORTT                                                                                         |  
;\-------------------------------------------------------------------------------------------------/                                                           
;
STARTUP_IO:
            bset  PUCR,     #%10010011                ; Enable core pull up/down on PORTS K E B A
            
            bset  PERT,     #%11111111                ; Enable pull on all pins of port T
            bset  PPST,     #%11111111                ; Set pull polarity to down for all pins
            
            bset  PERS,     #%11111111                ; Enable pull on all pins of port S
            bset  PPSS,     #%11111111                ; Set pull polarity to down for all pins
            
            bset  PERM,     #%11111111                ; Enable pull on all pins of port M
            bset  PPSM,     #%11111111                ; Set pull polarity to down for all pins
            
            bset  PERP,     #%11111111                ; Enable pull on all pins of port P
            bset  PPSP,     #%11111111                ; Set pull polarity to down for all pins
            
            bset  PERH,     #%11111111                ; Enable pull on all pins of port H
            bset  PPSH,     #%11111111                ; Set pull polarity to down for all pins
            
            bset  PERJ,     #%11111111                ; Enable pull on all pins of port J
            bset  PPSJ,     #%11111111                ; Set pull polarity to down for all pins
            
            rts
