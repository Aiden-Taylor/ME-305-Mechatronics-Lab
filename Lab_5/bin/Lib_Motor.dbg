;/-------------------------------------------------------------------------------------------------\ 
;| Motor Controller Subroutines                                                                    |
;|-------------------------------------------------------------------------------------------------|
;| HARDWARE DESCRIPTION                                                                            |
;| Manufacturer:     Polulu Co.                                                                    |
;| Model Number:     VNH5019 driver carrier                                                        |
;| Summary:          This module is a compact breakout board for ST's high power VNH5019 motor     |
;|                   driver IC, a fully integrated H-bridge that can be used for bidrectional      |
;|                   speed control of a single brushed dc motor.                                   |
;| Pins Used:        PP1 (PWM)                                                                     |
;|                   PT3 (ENA)                                                                     |
;|                   PT2 (ENB)                                                                     |
;|                   PT5 (INA)                                                                     |
;|                   PT4 (INB)                                                                     |
;|                   AN00 (CS)                                                                     |
;|                                                                                                 |
;| SUBROUTINE DESCRIPTION                                                                          |
;| STARTUP_MOTOR:    Initializes the motor driver in BRAKE_MOTOR mode                              |
;|                   Initializes pins for VNH5019 motor driver control                             |
;|                   Uses pins PT4 and PT5 for INA and INB to control direction of motor           |
;|                   Uses pin PP0 for PWM speed modulation                                         | 
;| ENABLE_MOTOR:     Brings both enable pins on the motor driver high turning the motor driver on. |
;| DISABLE_MOTOR:    Brings both enable pins on the motor driver low turning the motor driver off. |
;| UPDATE_MOTOR:     Outputs the absolute value of D as a velocity and the sign of D as a          |
;|                   direction. If D=8000 the motor will brake                                     |
;| CURRENT_MOTOR:    Reads 8 samples on ATD channel 0 and returns (motor_current x 1000) in Y      | 
;\-------------------------------------------------------------------------------------------------/ 
;
            INCLUDE 'derivative.inc'    
            XDEF STARTUP_MOTOR, ENABLE_MOTOR, DISABLE_MOTOR, UPDATE_MOTOR, CURRENT_MOTOR


; Motor Driver Equates
MotorPort   EQU   PORTA                                ; Port which motor driver is on
MotorDDR    EQU   DDRA                                 ; Port which motor driver is on    

mMotorINA   EQU   mPORTA_PA4                           ; Mask for motor driver INA
mMotorINB   EQU   mPORTA_PA5                           ; Mask for motor driver INB

mMotorENA   EQU   mPORTA_PA6                           ; Mask for motor driver ENA
mMotorENB   EQU   mPORTA_PA7                           ; Mask for motor driver ENB

PWM_PER     EQU   650                                  ; Period of PWM (15.385kHz)



Lib_Motor:  SECTION
           
STARTUP_MOTOR:                
            bclr  MotorPort, #mMotorINA               ; INIT INA LOW
            bclr  MotorPort, #mMotorINB               ; INIT INB LOW
            bclr  MotorPort, #mMotorENA               ; INIT ENA LOW
            bclr  MotorPort, #mMotorENB               ; INIT ENB LOW
            bset  MotorDDR, #mMotorINA                ; Enable Port T pin 5 as output for motor INA
            bset  MotorDDR, #mMotorINB                ; Enable Port T pin 4 as output for motor INB
            bset  MotorDDR, #mMotorENA                ; Enable Port T pin 3 as output for motor ENA
            bset  MotorDDR, #mMotorENB                ; Enable Port T pin 2 as output for motor ENB
            jsr   DISABLE_MOTOR                       ; Make sure motor is disabled at startup                                                                        
            movw  #PWM_PER,   PWMPER0                 ; Set PWM10 Period to 650          
            rts 
;------------------------------------------------------------------------------------------------------
ENABLE_MOTOR:                                                              
            movw  #$0000,   PWMDTY0                   ; Set PWM10 Duty to 0
            bset  MotorPort,#mMotorENA;               ; Set Port T pin 3 low to enable ENA              
            bset  MotorPort,#mMotorENB;               ; Set Port T pin 2 low to enable ENB 
            rts
;------------------------------------------------------------------------------------------------------
DISABLE_MOTOR:
            movw  #$0000,   PWMDTY0                   ; Set PWM10 Duty to 0
            bclr  MotorPort,#mMotorENA;               ; Set Port T pin 3 low to disable ENA              
            bclr  MotorPort,#mMotorENB;               ; Set Port T pin 2 low to disable ENB  
            rts                           
;------------------------------------------------------------------------------------------------------
UPDATE_MOTOR:
            cpd #$8000                                ; Check if the speed is set to BRAKE_MOTOR
            beq BRAKE_MOTOR                           ;
            
            cpd #$0000                                ; If not set to BRAKE_MOTOR, check direction
            blt CCW_MOTOR                             ; If negative spin counter clockwise

CW_MOTOR:                                                                      
            std  PWMDTY0                              ; Set PWM10 Duty to value in D
            bset MotorPort,#mMotorINA                 ; Direction channel A
            bclr MotorPort,#mMotorINB                 ; Direction channel B   
            rts

CCW_MOTOR: 
            ldy  #$FFFF                               ; Load y with negative 1
            emuls                                     ; Multiply D by Y to get a positive value
            std  PWMDTY0                              ; Set PWM10 Duty to value in D      
            bclr MotorPort,#mMotorINA                 ; Direction channel A
            bset MotorPort,#mMotorINB                 ; Direction channel B   
            rts
            
BRAKE_MOTOR:
            movw  #PWM_PER,  PWMDTY0                    ; Set PWM10 Duty to 100%      
            bclr MotorPort,#mMotorINA                 ; Direction channel A
            bclr MotorPort,#mMotorINB                 ; Direction channel B   
            rts                                                           
;------------------------------------------------------------------------------------------------------
CURRENT_MOTOR:
            movb  #%10000000,ATD1CTL5            
;                   |||||\_/
;                   ||||| |
;                   |||||  \___________________________ CC:CB:CA=000 (Analog Input Channel 0)
;                   |||| \_____________________________ Don't Care
;                   ||| \______________________________ MULT=0 (sample only one channel) 
;                   || \_______________________________ SCAN=0 (single conversion sequence)
;                   | \________________________________ DSGN=0 (Unsigned data representation in the result register)
;                    \_________________________________ DJM=1 (Right justified data in the result register)            
            brclr ATD1STAT0,#mATD1STAT0_SCF,*         ; Wait until sequence complete flag is true
            ldd   #$00                                ; Clear D before reading results
            addd  ATD1DR0                             ; Collect and add the results to D
            addd  ATD1DR1
            addd  ATD1DR2
            addd  ATD1DR3
            addd  ATD1DR4
            addd  ATD1DR5
            addd  ATD1DR6
            addd  ATD1DR7
            ldy   #10000                               ; Divide D by 0.2445 to get a value 1A/1000bits   
            ldx   #2448
            emul
            ediv
            rts            
